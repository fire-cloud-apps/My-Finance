@using MyFinance.Component
@using Supabase.RestAPI
@using System.Text.Json
@using static MyFinance.Component.DeviceDetect
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SupabaseService SupabaseService
@inject IAuthTokenProvider AuthTokenProvider
@inject ILogger<MainLayout> Logger

@* Required *@
<MudThemeProvider IsDarkMode="@isDarkMode" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<PageTitle>Home</PageTitle>

<DeviceDetect @ref="DeviceDetect" OnDeviceTypeChanged="OnDeviceTypeChanged"></DeviceDetect>

@code {
    private DeviceDetect DeviceDetect;
    private DeviceType _currentDeviceType = DeviceType.Desktop; // Default to Desktop

    private async Task OnDeviceTypeChanged(DeviceType deviceType)
    {
        _currentDeviceType = deviceType;
        Console.WriteLine($"Device type changed to {deviceType}");
        // Update your layout based on the device type
    }
}

<MudLayout>
    @if (!_isInitialized)
    {
        <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudAppBar Elevation="1">

            @if(_currentDeviceType == DeviceType.Desktop || _currentDeviceType == DeviceType.Tablet)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Menu"
                Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            }
            else
            {
                <LogoMobile />
            }
            
        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="isDarkMode"
                             Icon="@Icons.Material.Filled.LightMode"
                             Color="@Color.Error"
                             ToggledIcon="@Icons.Material.Filled.DarkMode"
                             ToggledColor="@Color.Success"
                             Title="@(isDarkMode ? "On" : "Off")" />

        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       Color="Color.Info" Edge="Edge.Start"
                       OnClick="RefreshSession" />

        @switch(_currentDeviceType)
        {
            case DeviceType.Mobile:
                <MudIconButton Icon="@Icons.Material.Filled.PhoneAndroid"
                       Color="Color.Tertiary" Edge="Edge.Start" />
                break;
            case DeviceType.Tablet:
                <MudIconButton Icon="@Icons.Material.Filled.TabletMac"
                       Color="Color.Surface" Edge="Edge.Start" />
                break;
            case DeviceType.Desktop:
                <MudIconButton Icon="@Icons.Material.Filled.Laptop"
                       Color="Color.Default" Edge="Edge.Start" />
                break;
        }

        @* Only render the MudMenu if the user is authenticated *@
        @if (SupabaseService.CurrentSession != null && SupabaseService.CurrentSession.User?.Id != null)
        {
            <MudMenu>
                <ActivatorContent>
                    <MudAvatar>
                        @* Use a null-coalescing operator for avatar_url and a placeholder for initial if email is null *@
                        <MudImage Src="@(SupabaseService.CurrentSession.GetUserMetadataString("avatar_url") ?? $"https://placehold.co/96x96/aabbcc/ffffff?text={(SupabaseService.CurrentSession.User.Email?.Length > 0 ? SupabaseService.CurrentSession.User.Email[0].ToString().ToUpper() : "U")}")"></MudImage>
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Label="@SupabaseService.CurrentSession.GetUserMetadataString("name")" Icon="@Icons.Material.Filled.Person" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Email" Icon="@Icons.Material.Filled.VerifiedUser" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Id" Icon="@Icons.Material.Filled.PermIdentity" />
                    <MudMenuItem Label="Logout" Icon="@Icons.Material.Filled.Logout"
                                 OnClick="SignOut" IconColor="Color.Secondary" />
                </ChildContent>
            </MudMenu>
        }


        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit"
                       Edge="Edge.End" />

    </MudAppBar>

        @if(_currentDeviceType == DeviceType.Mobile)
        {
            <MudAppBar Bottom="true" Class="align-content-center">
                <MudIconButton Icon="@Icons.Material.Filled.ListAlt"
                               Color="Color.Tertiary" Edge="Edge.Start"
                               OnClick="@((e) =>  NavigationManager.NavigateTo("dynamic-forms/Goals/List"))" />

                <MudIconButton Icon="@Icons.Material.Filled.List"
                               Color="Color.Tertiary" Edge="Edge.Start"
                               OnClick="@((e) => NavigationManager.NavigateTo(@MetaDetailsOptions.Value.InternalURLs.GoalEntryList))" />
                
            </MudAppBar>
        }

    <MudDrawer @bind-Open="_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>       
        <MudContainer>
                @Body
        </MudContainer>
              
    </MudMainContent>
    }

</MudLayout>

@code {

    private bool isDarkMode = true; // Default to dark mode
    private bool _drawerOpen = true; // Default to drawer open for initial load
    private bool _isInitialized = false;

    // No need for _isMasterKeySet, _masterKey, _localStorageToken in MainLayout if not directly displayed/used

    protected override async Task OnInitializedAsync()
    {
        _isInitialized = false;
        try
        {
            if(GlobalServices.UserInfo is not null)
            {
                Logger.LogInformation( $"MainLayout: UserInfo already initialized. { JsonSerializer.Serialize(GlobalServices.UserInfo)}");
                if(GlobalServices.UserInfo.Id is null)
                {
					NavigationManager.NavigateTo("refresh/true");
                }
            }
            else
            {
                Logger.LogInformation("MainLayout: UserInfo is null, initializing...");
			}
            await Task.Delay(500);
        }
        finally
        {
            _isInitialized = true;
        }        

    }

    private async Task RefreshSession()
    {
        // Only refresh if there's an active session to begin with
        if (SupabaseService.CurrentSession != null)
        {
            await SupabaseService.RefreshSession();
        }
    }

    private async Task SignOut()
    {
        await SupabaseService.SignOut();
        await LocalStorage.ClearAsync();
        await Task.Delay (200);
        NavigationManager.NavigateTo("login");
        // Navigation to login will be handled by OnAuthStateChangedHandler
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        //SupabaseService.OnAuthStateChanged -= OnAuthStateChangedHandler;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme(bool value)
    {
        isDarkMode = value;
    }
}
