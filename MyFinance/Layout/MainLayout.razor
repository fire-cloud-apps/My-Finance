@using Supabase.RestAPI
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SupabaseService SupabaseService
@inject IAuthTokenProvider AuthTokenProvider

@* Required *@
<MudThemeProvider IsDarkMode="@isDarkMode" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    @if (!_isInitialized)
    {
        <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudAppBar Elevation="1">

        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />


        <MudToggleIconButton @bind-Toggled="isDarkMode"
                             Icon="@Icons.Material.Filled.LightMode"
                             Color="@Color.Error"
                             ToggledIcon="@Icons.Material.Filled.DarkMode"
                             ToggledColor="@Color.Success"
                             title="@(isDarkMode ? "On" : "Off")" />

        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       Color="Color.Info" Edge="Edge.Start"
                       OnClick="RefreshSession" />


        @* Only render the MudMenu if the user is authenticated *@
        @if (SupabaseService.CurrentSession != null && SupabaseService.CurrentSession.User?.Id != null)
        {
            <MudMenu>
                <ActivatorContent>
                    <MudAvatar>
                        @* Use a null-coalescing operator for avatar_url and a placeholder for initial if email is null *@
                        <MudImage Src="@(SupabaseService.CurrentSession.GetUserMetadataString("avatar_url") ?? $"https://placehold.co/96x96/aabbcc/ffffff?text={(SupabaseService.CurrentSession.User.Email?.Length > 0 ? SupabaseService.CurrentSession.User.Email[0].ToString().ToUpper() : "U")}")"></MudImage>
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Label="@SupabaseService.CurrentSession.GetUserMetadataString("name")" Icon="@Icons.Material.Filled.Person" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Email" Icon="@Icons.Material.Filled.VerifiedUser" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Id" Icon="@Icons.Material.Filled.PermIdentity" />
                    <MudMenuItem Label="Logout" Icon="@Icons.Material.Filled.Logout"
                                 OnClick="SignOut" IconColor="Color.Secondary" />
                </ChildContent>
            </MudMenu>
        }


        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit"
                       Edge="Edge.End" />

    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
    }

</MudLayout>

@code {

    private bool isDarkMode = true; // Default to dark mode
    private bool _drawerOpen = true; // Default to drawer open for initial load
    private bool _isInitialized = false;

    // No need for _isMasterKeySet, _masterKey, _localStorageToken in MainLayout if not directly displayed/used

    protected override async Task OnInitializedAsync()
    {
        _isInitialized = false;
        try
        {
            // Initialize the SupabaseService to set up JS Interop callbacks.
            // This should ideally be called once, perhaps in App.razor or Program.cs,
            // but if it handles component-specific initialization, keep it here.
            await SupabaseService.InitializeAsync();
            await Task.Delay(500);
        }
        finally
        {
            _isInitialized = true;
        }        

        // Subscribe to auth state changes to update the UI.
        // This ensures the UI reacts to login/logout.
        //SupabaseService.OnAuthStateChanged += OnAuthStateChangedHandler;

        // Optionally, check initial session state here if needed for immediate UI update on first load.
        // However, OnAuthStateChangedHandler will cover this after the initial check from SupabaseService.
    }

   //  private void OnAuthStateChangedHandler(JsSession? session)
   //  {
   //      // This method is called when the auth state changes.
   //      // It triggers a re-render of this component (MainLayout)
   //      // so the AppBar buttons and user info can be updated.
   //      // We only call StateHasChanged if the session status has actually changed
   //      // from what the UI is currently displaying, to avoid unnecessary re-renders.

   //      // Get the current session state from the service for comparison
   //      bool isAuthenticated = SupabaseService.CurrentSession != null && SupabaseService.CurrentSession.User?.Id != null;
   //      bool newSessionAuthenticated = session != null && session.User?.Id != null;

   //      // Only re-render if the authentication status changes
   //      if (isAuthenticated != newSessionAuthenticated)
   //      {
   //          StateHasChanged(); // Re-render this component
   //      }

   //      // Navigate to login if session is null/invalid.
   //      // This should be done only if the user is truly unauthenticated.
   //      if (newSessionAuthenticated)
   //      {
   //          UserInfo userInfo = new UserInfo()
   //              {
   //                  Id = session.User.Id,
   //                  Name = session.GetUserMetadataString("name"),
   //                  Email = session.GetUserMetadataString("email")

   //              };
			// LocalStorage.SetItemAsStringAsync("accessToken", session.AccessToken);
   //          LocalStorage.SetItemAsync<UserInfo>("userInfo", userInfo);
			// AuthTokenProvider.SetAuthToken(session.AccessToken);
   //      }
   //      else
   //      {
   //          // Only navigate if not already on the login page to prevent looping
   //          if (!NavigationManager.Uri.Contains("/login"))
   //          {
   //              NavigationManager.NavigateTo("/login");
   //          }
   //      }
   //      Console.WriteLine("MainLayout: OnAuthStateChangedHandler - Triggered.");
   //  }

    private async Task RefreshSession()
    {
        // Only refresh if there's an active session to begin with
        if (SupabaseService.CurrentSession != null)
        {
            await SupabaseService.RefreshSession();
        }
    }

    private async Task SignOut()
    {
        await SupabaseService.SignOut();
        // Navigation to login will be handled by OnAuthStateChangedHandler
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        //SupabaseService.OnAuthStateChanged -= OnAuthStateChangedHandler;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme(bool value)
    {
        isDarkMode = value;
    }
}
