@using MyFinance.Component
@using Supabase.RestAPI
@using System.Text.Json
@using static MyFinance.Component.DeviceDetect
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SupabaseService SupabaseService
@inject IAuthTokenProvider AuthTokenProvider

@* Required *@
<MudThemeProvider IsDarkMode="@isDarkMode" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<PageTitle>Home</PageTitle>

<DeviceDetect @ref="DeviceDetect" OnDeviceTypeChanged="OnDeviceTypeChanged"></DeviceDetect>

@code {
    private DeviceDetect DeviceDetect;
    private DeviceType _currentDeviceType = DeviceType.Desktop; // Default to Desktop

    private async Task OnDeviceTypeChanged(DeviceType deviceType)
    {
        _currentDeviceType = deviceType;
        Console.WriteLine($"Device type changed to {deviceType}");
        // Update your layout based on the device type
    }
}

<MudLayout>
    @if (!_isInitialized)
    {
        <MudProgressLinear Color="Color.Tertiary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudAppBar Elevation="1">

            @if(_currentDeviceType == DeviceType.Desktop || _currentDeviceType == DeviceType.Tablet)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Menu"
                Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            }
            else
            {
                <LogoMobile />
            }
            
        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="isDarkMode"
                             Icon="@Icons.Material.Filled.LightMode"
                             Color="@Color.Error"
                             ToggledIcon="@Icons.Material.Filled.DarkMode"
                             ToggledColor="@Color.Success"
                             Title="@(isDarkMode ? "On" : "Off")" />

        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       Color="Color.Info" Edge="Edge.Start"
                       OnClick="RefreshSession" />

        @switch(_currentDeviceType)
        {
            case DeviceType.Mobile:
                <MudIconButton Icon="@Icons.Material.Filled.PhoneAndroid"
                       Color="Color.Tertiary" Edge="Edge.Start" />
                break;
            case DeviceType.Tablet:
                <MudIconButton Icon="@Icons.Material.Filled.TabletMac"
                       Color="Color.Surface" Edge="Edge.Start" />
                break;
            case DeviceType.Desktop:
                <MudIconButton Icon="@Icons.Material.Filled.Laptop"
                       Color="Color.Default" Edge="Edge.Start" />
                break;
        }

        @* Only render the MudMenu if the user is authenticated *@
        @if (SupabaseService.CurrentSession != null && SupabaseService.CurrentSession.User?.Id != null)
        {
            <MudMenu>
                <ActivatorContent>
                    <MudAvatar>
                        @* Use a null-coalescing operator for avatar_url and a placeholder for initial if email is null *@
                        <MudImage Src="@(SupabaseService.CurrentSession.GetUserMetadataString("avatar_url") ?? $"https://placehold.co/96x96/aabbcc/ffffff?text={(SupabaseService.CurrentSession.User.Email?.Length > 0 ? SupabaseService.CurrentSession.User.Email[0].ToString().ToUpper() : "U")}")"></MudImage>
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Label="@SupabaseService.CurrentSession.GetUserMetadataString("name")" Icon="@Icons.Material.Filled.Person" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Email" Icon="@Icons.Material.Filled.VerifiedUser" />
                    <MudMenuItem Label="@SupabaseService.CurrentSession.User?.Id" Icon="@Icons.Material.Filled.PermIdentity" />
                    <MudMenuItem Label="Logout" Icon="@Icons.Material.Filled.Logout"
                                 OnClick="SignOut" IconColor="Color.Secondary" />
                </ChildContent>
            </MudMenu>
        }


        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit"
                       Edge="Edge.End" />

    </MudAppBar>

        @if(_currentDeviceType == DeviceType.Mobile)
        {
            <MudAppBar Bottom="true" Class="align-content-center">
                <MudIconButton Icon="@Icons.Material.Filled.ListAlt"
                               Color="Color.Tertiary" Edge="Edge.Start"
                               OnClick="@((e) =>  NavigationManager.NavigateTo("dynamic-forms/Goals/List"))" />

                <MudIconButton Icon="@Icons.Material.Filled.List"
                               Color="Color.Tertiary" Edge="Edge.Start"
                               OnClick="@((e) => NavigationManager.NavigateTo(@MetaDetailsOptions.Value.InternalURLs.GoalEntryList))" />
                
            </MudAppBar>
        }

    <MudDrawer @bind-Open="_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>        
        @Body        
    </MudMainContent>
    }

</MudLayout>

@code {

    private bool isDarkMode = true; // Default to dark mode
    private bool _drawerOpen = true; // Default to drawer open for initial load
    private bool _isInitialized = false;

    // No need for _isMasterKeySet, _masterKey, _localStorageToken in MainLayout if not directly displayed/used

    protected override async Task OnInitializedAsync()
    {
        _isInitialized = false;
        try
        {
            // Initialize the SupabaseService to set up JS Interop callbacks.
            // This should ideally be called once, perhaps in App.razor or Program.cs,
            // but if it handles component-specific initialization, keep it here.
            //await SupabaseService.InitializeAsync();

            // Subscribe to auth state changes to update the UI.
            // This ensures the UI reacts to login/logout.
            // SupabaseService.OnAuthStateChanged += OnAuthStateChangedHandler;

            // if (SupabaseService.CurrentSession != null)
            // {
            //     GlobalServices.JsSession = SupabaseService.CurrentSession;
            //     var user = SupabaseService.CurrentSession.User;
            //     GlobalServices.AuthToken = SupabaseService.CurrentSession.AccessToken;
            //     GlobalServices.UserInfo = new UserInfo()
            //         {
            //             Id = SupabaseService.CurrentSession.User.Id,
            //             Name = SupabaseService.CurrentSession.GetUserMetadataString("name"),
            //             Email = SupabaseService.CurrentSession.GetUserMetadataString("email")
            //         };
            // }
            // else
            // {
            //     Console.WriteLine($"Handle-Success::JsSession Failed!");
            // }
            await Task.Delay(500);
        }
        finally
        {
            _isInitialized = true;
        }        

        // Subscribe to auth state changes to update the UI.
        // This ensures the UI reacts to login/logout.
        //SupabaseService.OnAuthStateChanged += OnAuthStateChangedHandler;

        // Optionally, check initial session state here if needed for immediate UI update on first load.
        // However, OnAuthStateChangedHandler will cover this after the initial check from SupabaseService.
    }

    /*
    private void OnAuthStateChangedHandler(JsSession? session)
    {
        // This method is called when the auth state changes.
        // It triggers a re-render of this component (MainLayout)
        // so the AppBar buttons and user info can be updated.
        // We only call StateHasChanged if the session status has actually changed
        // from what the UI is currently displaying, to avoid unnecessary re-renders.

        // Get the current session state from the service for comparison
        bool isAuthenticated = SupabaseService.CurrentSession != null && SupabaseService.CurrentSession.User?.Id != null;
        bool newSessionAuthenticated = session != null && session.User?.Id != null;

        // Only re-render if the authentication status changes
        if (isAuthenticated != newSessionAuthenticated)
        {
            StateHasChanged(); // Re-render this component
            }

        // Navigate to login if session is null/invalid.
        // This should be done only if the user is truly unauthenticated.
        if (newSessionAuthenticated)
        {
            UserInfo userInfo = new UserInfo()
            {
                Id = session.User.Id,
                Name = session.GetUserMetadataString("name"),
                Email = session.GetUserMetadataString("email")

                };
            LocalStorage.SetItemAsStringAsync("accessToken", session.AccessToken);
            LocalStorage.SetItemAsync<UserInfo>("userInfo", userInfo);

            GlobalServices.JsSession = session; // Update the global JS session
            GlobalServices.UserInfo = userInfo; // Update the global user info
            GlobalServices.AuthToken = session.AccessToken; // Update the global auth token

            Console.WriteLine($"Main-Layout::JsSession Success! {JsonSerializer.Serialize(GlobalServices.JsSession)} ");
            NavigationManager.NavigateTo("home", false);

            }
        else
        {
            // Only navigate if not already on the login page to prevent looping
            if (!NavigationManager.Uri.Contains("/login"))
            {
                NavigationManager.NavigateTo("login");
                }

            }
        Console.WriteLine("MainLayout: OnAuthStateChangedHandler - Triggered.");
        }
    */
    private async Task RefreshSession()
    {
        // Only refresh if there's an active session to begin with
        if (SupabaseService.CurrentSession != null)
        {
            await SupabaseService.RefreshSession();
        }
    }

    private async Task SignOut()
    {
        await SupabaseService.SignOut();
        await LocalStorage.ClearAsync();
        await Task.Delay (200);
        NavigationManager.NavigateTo("login");
        // Navigation to login will be handled by OnAuthStateChangedHandler
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        //SupabaseService.OnAuthStateChanged -= OnAuthStateChangedHandler;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme(bool value)
    {
        isDarkMode = value;
    }
}
