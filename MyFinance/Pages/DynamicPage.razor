@page "/dynamic-forms/{Module}/{Component}/{Id:guid?}"

@using MyFinace.Modules.GoalEntry
@using MyFinance.Component
@using MyFinance.Model
@using MyFinance.Utility
@using MyFinace.Modules.Goals
@using Supabase.RestAPI
@using static MyFinance.Component.DeviceDetect

@inject SupabaseApiService<Goal> GoalService
@inject SupabaseApiService<GoalEntry> GoalEntryService
@inject ILogger<DynamicPage> Logger



@* Paramer and Variable Decleration *@
@code {
	[Parameter]
	public string Module { get; set; }
	[Parameter]
	public string Component { get; set; }
	[Parameter]
	public Guid? Id { get; set; }

	private bool _isInitializing = true;
    private GlobalServices _globalServices; // Initialize this

    protected override async Task OnInitializedAsync()
    {
        _isInitializing = true;
        try
        {
			Logger.LogInformation($"Is Goal Service {GoalService == null}");
			Logger.LogInformation($"Is Goal Entry Service {GoalEntryService == null}");

            var session = await LocalStorage.GetItemAsync<JsSession>("sessionInfo");
            _globalServices = new GlobalServices(session);
            GlobalServices.AuthToken = await LocalStorage.GetItemAsync<string>("accessToken");            
			Logger.LogInformation($"Dynamic Form:Token: {!string.IsNullOrEmpty(GlobalServices.AuthToken)}.");

            // Assign access token to the injected services
            GoalService.AccessToken = GlobalServices.AuthToken;
            GoalEntryService.AccessToken = GlobalServices.AuthToken;
            

            await Task.Delay(500); // Give some time for services to be ready, though not strictly necessary if injection works synchronously
        }
        finally
        {
            _isInitializing = false;
            StateHasChanged();
        }		
    }
}

<DeviceDetect @ref="DeviceDetect" OnDeviceTypeChanged="OnDeviceTypeChanged"></DeviceDetect>

@code {
    private DeviceDetect DeviceDetect;
    private DeviceType _currentDeviceType = DeviceType.Desktop; // Default to Desktop

    private async Task OnDeviceTypeChanged(DeviceType deviceType)
    {
        _currentDeviceType = deviceType;
		Logger.LogInformation($"DynamicPage: Device type changed to {deviceType}");
        // Update your layout based on the device type
    }
}

@if(string.IsNullOrEmpty(Module) || string.IsNullOrEmpty(Component))
{
	<MudText Typo="Typo.h6" Class="text-danger">Module or Component not specified.</MudText>
}
else
{
	<PageTitle>MyFinance - @Module - @Component</PageTitle>
	<MudContainer Class="@(_currentDeviceType == DeviceType.Mobile ? "" : "ma-4 pa-4")">

	@if (_isInitializing)
	{
		<MudCard>
			<MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
			<MudCardContent>
				<MudSkeleton Width="30%" Height="42px;" />
				<MudSkeleton Width="80%" />
				<MudSkeleton Width="100%" />
			</MudCardContent>
			<MudCardActions>
				<MudSkeleton Width="64px" Height="40px" Class="ml-2" />
				<MudSkeleton Width="105px" Height="40px" Class="ml-3" />
			</MudCardActions>
		</MudCard>
	}
	else // Only render components when initialization is complete
	{
		@switch (Module)
		{
			case "Goals":
				@switch (Component)
				{
					case "Add":
					case "Add-Goals":
					case "addgoals":
						<GoalAction Global="@_globalServices" 										GoalService="@GoalService" />
						break;
					case "Edit":
					case "Edit-Goals":						
						<GoalAction Global="@_globalServices"  GoalID="@Id"
									GoalService="@GoalService" />
						break;
					case "Find":
						<FindGoal SupabaseService="@SupabaseService"  />
						break;
					case "List":
					case "ListGoals":
							<ListGoals Supabase_GoalService="@GoalService" Global="@_globalServices" />
							break;					
					default:
					<MudText Typo="Typo.h6"
						Class="text-warning">Unknown Goal Component: @Component</MudText>
					break;
				}
				break;
			case "GoalContribution":
				@switch (Component)
				{
					case "Add":
					case "add-plan":
						<GoalEntryForm GoalService="@GoalService" GoalEntryService="@GoalEntryService" />
						break;
					case "Edit":
					case "edit-plan":
						<GoalEntryForm GoalService="@GoalService"
							GoalEntryService="@GoalEntryService"
							GoalID="@Id"/>

						break;
					case "List":
					case "ListGoalsPlans":
							<ListGoalEntry DeviceType="@_currentDeviceType" SupabaseService="GoalEntryService" />

						break;
					default:
						<MudText Typo="Typo.h6" Class="text-warning">Unknown Goals Contribution Component: @Component</MudText>
						break;
				}
				break;
			case "AWS":
				@switch(Component)
					{
						case "Serverless":
							<TestLearn />
							break;
						default:
							<MudText Typo="Typo.h6" Class="text-warning">Unknown Goals Contribution Component: @Component</MudText>
							break;
					}
					break;
			default:
					Logger.LogInformation($"Module {Module} & Component {Component} not recognized.");
				break;
		}
	}
	</MudContainer>
}