@page "/home"
@page "/dashboard"

@using MyFinace.Modules.GoalEntry
@using MyFinace.Modules.Goals
@using MyFinance.Component
@using MyFinance.Model
@using Supabase.RestAPI
@using static MyFinance.Component.DeviceDetect

@inject IJSRuntime JsRuntime
@inject SupabaseApiService<Goal> GoalService
@inject SupabaseApiService<GoalEntry> GoalEntryService
@inject IAuthTokenProvider AuthTokenProvider

@if (_isInitializing)
{
   
    <MudCard>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
    </MudCard>
}
else
{
   @*  <My.Learn.CodeBase Markdown="@_html" /> *@
   
    <GoalsDashboard GoalApiService="@GoalService" />
    <br />
    <GoalDashboard GoalApiService="@GoalService" />
     <br/>
    <GoalSummary />
}


@code {

    private bool _isInitializing = true;
    private string _html;
    private string _markdown = string.Empty;
    protected override async Task OnInitializedAsync()
    {

        _isInitializing = true;
        try
        {
            GlobalServices.AuthToken = await LocalStorage.GetItemAsync<string>("accessToken");            
            LogHelper.LogMessage(
                source: "Home.razor",
                method: nameof(OnInitializedAsync),
                message: $"Dynamic Form:: Token exists? {!string.IsNullOrEmpty(GlobalServices.AuthToken)}.",
                level: LogLevel.Information);
            GoalService.AccessToken = GlobalServices.AuthToken;
            GoalEntryService.AccessToken = GlobalServices.AuthToken;

            await Task.Delay(500);

            _markdown = await HTTPClient.GetStringAsync("md/Real-time-Analytics.md");
            _html = Markdig.Markdown.ToHtml(_markdown);

            
            StateHasChanged();
        }
        finally
        {
            _isInitializing = false;
        }        
    }

    private void HandleGoalSelection(SelectGoal.GoalEntryModel goal)
    {
        Console.WriteLine($"Parent Goal - ID: {goal.Id}, Name: {goal.Name}");
    }
}
<MudDivider />