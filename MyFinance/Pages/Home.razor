@page "/home"
@page "/"

@using MyFinace.Modules.GoalEntry
@using MyFinance.Model
@using Supabase.RestAPI

@inject SupabaseApiService<Goal> GoalService
@inject SupabaseApiService<GoalEntry> GoalEntryService
@inject IAuthTokenProvider AuthTokenProvider

<PageTitle>Home</PageTitle>


@* @if (!string.IsNullOrEmpty(GlobalServices.AuthToken)) *@
@if (_isInitializing)
{
    <MudCard>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
    </MudCard>
    
}
else
{
    @* <SelectGoal GoalSelected="HandleGoalSelection" ApiService="@GoalService" /> *@
    
    <MyFinace.Modules.Goals.GoalDashboard GoalApiService="@GoalService" />
}


@code {

    private bool _isInitializing = true;
    protected override async Task OnInitializedAsync()
    {

        _isInitializing = true;
        try
        {
            GlobalServices.AuthToken = await LocalStorage.GetItemAsync<string>("accessToken");
            Console.WriteLine($"Dynamic Form:: Token exists? {!string.IsNullOrEmpty(GlobalServices.AuthToken)}.");
            GoalService.AccessToken = GlobalServices.AuthToken;
            GoalEntryService.AccessToken = GlobalServices.AuthToken;

            await Task.Delay(500);

            StateHasChanged();
        }
        finally
        {
            _isInitializing = false;
        }        
    }

    private void HandleGoalSelection(SelectGoal.GoalEntryModel goal)
    {
        Console.WriteLine($"Parent Goal - ID: {goal.Id}, Name: {goal.Name}");
    }
}
<MudDivider />