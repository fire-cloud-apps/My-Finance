@page "/codedisplay"
@inject IJSRuntime JSRuntime

<PageTitle>Code & Diagrams</PageTitle>

<h1>Code & Diagrams in Blazor</h1>

<p>This page demonstrates how to use Highlight.js for code syntax highlighting and Mermaid.js for diagrams within a Blazor application. The JavaScript initialization is triggered after Blazor renders the content.</p>

<h2>JavaScript Example:</h2>
<pre><code class="language-javascript">
// This function is rendered by Blazor
function greetBlazor() {
  console.log("Hello from Blazor!");
}
greetBlazor();
</code></pre>

<h2>Python Example:</h2>
<pre><code class="language-python">
# Python code rendered by Blazor
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(f"Factorial of 5 is: {factorial(5)}")
</code></pre>

<h2>Mermaid Diagram Example:</h2>
<p>This flowchart is generated by Mermaid.js after the Blazor component renders.</p>
<pre class="mermaid">
graph TD
    A[Blazor App] --> B{Component Rendered?};
    B -- Yes --> C[Call JS Interop];
    C --> D[Initialize Highlight.js];
    C --> E[Initialize Mermaid.js];
    D & E --> F[Content Displayed];
</pre>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function to initialize Highlight.js
            await JSRuntime.InvokeVoidAsync("initHighlightJs");

            // Call the JavaScript function to initialize Mermaid.js
            await JSRuntime.InvokeVoidAsync("initMermaidJs");

            // Just for demonstration: log a message from Blazor to JS console
            await JSRuntime.InvokeVoidAsync("logMessage", "Blazor component has finished its first render!");
        }
    }
}
