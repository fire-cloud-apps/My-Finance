@using Microsoft.Extensions.Logging
@using MyFinance.Model
@using MudBlazor
@using MyFinance.Utility.Helper
@using Supabase.RestAPI
@using System.Text.Json
@inject ISnackbar Snackbar

@inject NavigationManager NavigationManager

@if (_isInitializing)
{
    <MudCard Class="ma-8">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
    </MudCard>

}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="my-8">
        <div class="d-flex flex-column align-center justify-center mb-6">
            <div class="d-flex align-center justify-center">
                <MudIcon Icon="@Icons.Material.Filled.Lightbulb" Color="Color.Primary" Size="Size.Large" Class="mr-2" />
                <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary">Create New Goal Entry</MudText>
            </div>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-2">
                Set up your financial aspirations by defining a new goal.
            </MudText>
        </div>

        <MudPaper Elevation="6" Class="pa-8 rounded-xl shadow-lg animate__animated animate__fadeInUp" Color="Color.Surface">
            <MudForm @ref="form" Model="@goalEntry" EnableValidation="true">
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="6">
                        <SelectGoal @ref="@selectGoal" GoalSelected="HandleGoalSelection"  InitialSelectedGoal="@InitialGoalForChild" ApiService="@GoalService" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="goalEntry.Name" Label="Goal Name" Required="true" RequiredError="Goal Name is required!"
                                      AdornmentIcon="@Icons.Material.Filled.EmojiObjects" AdornmentColor="Color.Warning" Adornment="Adornment.Start" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="goalEntry.Description" Label="Description" Lines="3" Variant="Variant.Outlined" FullWidth="true"
                                      AdornmentIcon="@Icons.Material.Filled.Description" AdornmentColor="Color.Info" Adornment="Adornment.Start"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="goalEntry.Platform" Label="Platform" Required="true" RequiredError="Platform is required!"
                                   AdornmentIcon="@Icons.Material.Filled.Cloud" AdornmentColor="Color.Tertiary" Adornment="Adornment.Start" Variant="Variant.Outlined" FullWidth="true">
                            @foreach (var platform in GoalEntryMetaData.Platform)
                            {
                                <MudSelectItem Value="@platform">@platform</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudCheckBox @bind-Value="goalEntry.IsActive" Label="Is Active" Color="Color.Primary" Class="mt-4" T="bool"></MudCheckBox>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="goalEntry.FundName" Label="Fund Name"
                                      AdornmentIcon="@Icons.Material.Filled.AccountBalance" AdornmentColor="Color.Surface" Adornment="Adornment.Start" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="goalEntry.SIPAmount" Label="SIP Amount" Required="true" RequiredError="SIP Amount is required!"
                                         Min="0" Format="N2" Adornment="Adornment.Start" AdornmentText="₹" HideSpinButtons="true" Variant="Variant.Outlined" FullWidth="true"
                                         AdornmentIcon="@Icons.Material.Filled.Payments" AdornmentColor="Color.Success"></MudNumericField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="goalEntry.TargetAmount" Label="Target Amount" Required="true" RequiredError="Target Amount is required!"
                                         Min="0" Format="N2" Adornment="Adornment.Start" AdornmentText="₹" HideSpinButtons="true" Variant="Variant.Outlined" FullWidth="true"
                                         AdornmentIcon="@Icons.Material.Filled.TrendingUp" AdornmentColor="Color.Info"></MudNumericField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="goalEntry.InvestedAmount" Label="Invested Amount" Required="true" RequiredError="Invested Amount is required!"
                                         Min="0" Format="N2" Adornment="Adornment.Start" AdornmentText="₹" HideSpinButtons="true" Variant="Variant.Outlined" FullWidth="true"
                                         AdornmentIcon="@Icons.Material.Filled.AccountBalanceWallet" AdornmentColor="Color.Success"></MudNumericField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="goalEntry.ImageSVG" Label="Image SVG (Paste SVG content)" Lines="5" Variant="Variant.Outlined" FullWidth="true"
                                      AdornmentIcon="@Icons.Material.Filled.Image" AdornmentColor="Color.Warning" Adornment="Adornment.Start"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="goalEntry.Tag" Label="Tags (comma separated)"
                                      AdornmentIcon="@Icons.Material.Filled.LocalOffer" AdornmentColor="Color.Error" Adornment="Adornment.Start" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="goalEntry.OwnedBy" Label="Owned By"
                                      AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Surface" Adornment="Adornment.Start" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudForm>
            <MudCardActions Class="d-flex justify-content-end pa-4">
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ResetForm" Class="mr-2">
                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Class="mr-1" />
                    Cancel
                </MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveGoal" Disabled="@(!form.IsValid)" EndIcon="@Icons.Material.Filled.Save">
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" />
                    @(_model + " Goal")
                </MudButton>
            </MudCardActions>
        </MudPaper>
    </MudContainer>
}

@* Variable Declarations *@
@code{

    [Parameter]
    public SupabaseApiService<Goal> GoalService { get; set; }    
    [Parameter]
    public SupabaseApiService<GoalEntry> GoalEntryService { get; set; }

    [Parameter]
    public Guid? GoalID { get; set; } = Guid.Empty; // Default to empty GUID if not provided

    private SelectGoal.GoalEntryModel SelectedGoalFromChild = new SelectGoal.GoalEntryModel();

    // This is the model you want to pass down to the child to pre-select an item
    private SelectGoal.GoalEntryModel? InitialGoalForChild;

    private GoalEntry goalEntry = new GoalEntry();
    private MudForm form;
    private bool _isInitializing = true;
    SelectGoal selectGoal;
    private bool _isCreate = true; // Flag to determine if we are creating a new goal entry or 'edit' a existing goal.
    private string _model = string.Empty;

	
}

@* Initialization and Goal Setter *@
@code{

    protected override async Task OnInitializedAsync()
    {
        _isInitializing = true;
        try
        {
            if(GoalEntryService == null)
            {
                throw new ArgumentNullException(nameof(GoalEntryService), "GoalEntryService cannot be null.");
            }
            else if(string.IsNullOrEmpty (GoalEntryService.AccessToken))
            {
                throw new ArgumentException("AccessToken cannot be null or empty.", nameof(GoalEntryService.AccessToken));
            }

            // Determine if we are creating a new goal entry or editing an existing one
            if(Guid.Empty == GoalID)
            {
                _isCreate = true; // Creating a new goal entry
                SetDefaultGoalEntry();
            }
            else
            {
                _isCreate = false; // Editing an existing goal entry
                var toEdit = await GoalEntryService.GetById(GoalID);
                
				goalEntry = toEdit.Data; 
				SelectedGoalFromChild.Id = goalEntry.ParentId.ToString(); // Set the initial selected goal ID
				SelectedGoalFromChild.Name = goalEntry.Name; // Set the initial selected goal name
				InitialGoalForChild = SelectedGoalFromChild; // Pass the initial                 
            }
            _model = _isCreate ? "Created" : "Updated";
            LogHelper.LogMessage(
                source:"GoalEntryForm",
                method: "OnInitializedAsync",
                level: LogLevel.Information,
                message:  $" Goal Entry: {JsonSerializer.Serialize<GoalEntry>(goalEntry)}");
            
            // Optionally, you can fetch initial data or perform other setup tasks here
            await Task.Delay(500); // Simulate some delay for initialization"
        }

        finally
        {
            _isInitializing = false;
        }
    }

    private void SetDefaultGoalEntry()
    {
        goalEntry.OwnedBy = "SRG";
        goalEntry.IsActive = true;
        goalEntry.ParentId = Guid.Empty; // Initialize ParentId to empty GUID
        goalEntry.Description = "Goal Description"; // Default description
        goalEntry.ImageSVG = "<svg>...</svg>"; // Default SVG content, replace with actual SVG if needed
        goalEntry.Platform = GoalEntryMetaData.Platform[0]; // Default platform, can be changed later
        goalEntry.Tag = "default,goal"; // Default tags, can be changed later
        goalEntry.FundName = "Default Fund"; // Default fund name, can be changed later
        goalEntry.SIPAmount = 1000; // Default SIP amount, can be changed later
        goalEntry.TargetAmount = 100000; // Default target amount, can be changed later
        goalEntry.InvestedAmount = 50000; // Default invested amount, can be changed later
        goalEntry.Name = "Default Goal"; // Default goal name, can be changed later
    }

    private void HandleGoalSelection(SelectGoal.GoalEntryModel goal)
    {
        Console.WriteLine($"Parent Goal - ID: {goal.Id}, Name: {goal.Name}");
        goalEntry.ParentId = Guid.Parse( goal.Id);
		goalEntry.Name = goal.Name;

    }
}

@* Create/Update Goal Event Handler *@
@code {
    private async Task SaveGoal()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Console.WriteLine($"Creating Goal Entry: {JsonSerializer.Serialize<GoalEntry>(goalEntry)}");
            SupabaseResult<GoalEntry> result;

            if (_isCreate)
            {
                result = await GoalEntryService.Create(goalEntry);
            }
            else
            {

                result = await GoalEntryService.Update(GoalID, goalEntry);
                //result = await GoalEntryService.Update(goalEntry);
            }

            if (result.IsSuccess)
            {
                var resultData = result.Data; // Store the created goal for subsequent operations
                Snackbar.Add($"Goal Entry {_model} Successfully!", Severity.Success, config =>
                {
                    config.VisibleStateDuration = 3000;
                    config.ShowCloseIcon = false;
                });
            }
            else
            {
                Snackbar.Add($"Goal Entry {_model} Failed! - {result.ErrorMessage}", Severity.Error, config =>
                {
                    config.VisibleStateDuration = 3000;
                    config.ShowCloseIcon = false;
                });
            }

            await CalculateParentGoals();
            ResetForm();

			NavigationManager.NavigateTo("dynamic-forms/GoalContribution/List"); 
        }
        else
        {
            Snackbar.Add("Please correct the form errors.", Severity.Warning, config =>
            {
                config.VisibleStateDuration = 3000;
                config.ShowCloseIcon = false;
            });
        }
    }

    private void ResetForm()
    {
        goalEntry = new GoalEntry(); // Resets the model to its default values
        goalEntry.ParentId = Guid.Empty; // Ensure ParentId is also reset
        form.ResetValidation(); // Resets validation state
        Snackbar.Add("Form has been reset.", Severity.Info, config =>
        {
            config.VisibleStateDuration = 2000;
            config.ShowCloseIcon = false;
        });
    }
}

@* 
  Logic behind the Edit/Update goalentry to update the Goal and re-calculate the 
    1. Invested Amount
    2. Total SIPs
    3. Amount Already Invested.
*@
@code{
    private async Task CalculateParentGoals()
    {
        try
        {
            //1. Get the Parent Goal by Id
            var parentGoal = await GoalService.GetById(goalEntry.ParentId); //Success to be checked.
            //2. Get the Child items based on parent Id
            var childGoals = await GoalEntryService.Filter(columnName: "parent_GoalId", value: parentGoal.Data.Id.ToString());
            if (parentGoal == null || childGoals == null) return;
            //3. Calculate the above, Invested Amount, Total SIP, isActive
            decimal investedAmount = 0;
            decimal sipAmount = 0;
            int activeSips = 0;

            if (childGoals.IsSuccess)
            {
                var childItems = childGoals.Data;
                foreach(var items in childItems)
                {
                    investedAmount = investedAmount + items.InvestedAmount;
                    if (items.IsActive)
                    {
                        sipAmount = sipAmount + items.SIPAmount;
                        activeSips++;
                    }       
                }
                Console.WriteLine($"----> Calculation Done.");
            }

            //4. Initiate the Goal Update.
            if (parentGoal.IsSuccess)
            {
                var goal = parentGoal.Data;
                goal.TotalAmountInvested = investedAmount;
                goal.TotalSIPAmount = sipAmount;
                goal.SIPCount = activeSips;

                await GoalService.Update(goal.Id, goal);
                Console.WriteLine($"----> Calculated Values Saved.");
            }
            
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

} 