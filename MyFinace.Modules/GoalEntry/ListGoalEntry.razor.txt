@page "/goalentries"
@using MyFinance.Model
@using MyFinance.Utility.Helper
@using Supabase.RestAPI
@using System.Globalization
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (isLoading && DisplayedGoals.Count == 0 && totalGoalsCount == 0)
{
    <MudProgressCircular Indeterminate="true" Class="d-flex justify-center mt-8" Color="Color.Primary" />
}
else if (DisplayedGoals.Count == 0 && totalGoalsCount == 0)
{
    <MudAlert Severity="Severity.Info" Class="rounded-lg shadow-sm">No goals found. Start by adding a new goal!</MudAlert>
}
else
{
    <div Class="ma-2 pa-2 d-flex" Elevation="0">
        <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center">
            <MudIcon Color="Color.Warning" Icon="material-symbols-outlined/arrow_upload_ready" Size="Size.Large" />
            <MudText Typo="Typo.h4" Class="mb-0 mud-text-secondary">Your Financial Goals</MudText>
        </MudStack>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => NavigationManager.NavigateTo("dynamic-forms/GoalContribution/add-plan"))">
            Add New Goal
        </MudButton>
    </div>

    <MudPaper Elevation="6" Class="pa-6 rounded-xl animate__animated animate__fadeInUp mb-8">
        <MudTextField @bind-Value="SearchTerm"
                      Label="Search Goals by Name"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Primary"
                      Clearable="true"
                      OnAdornmentClick="PerformSearch"
                      OnClearButtonClick="ClearSearch"
                      @bind-Value:after="OnSearchChanged"
                      DebounceInterval="300" />
    </MudPaper>

    @if (DisplayedGoals.Count == 0 && !string.IsNullOrWhiteSpace(SearchTerm))
    {
        <MudAlert Severity="Severity.Info" Class="rounded-lg shadow-sm mb-4">
            No goals found matching "@SearchTerm". Try a different search term.
        </MudAlert>
    }
    else if (DisplayedGoals.Count > 0)
    {
        <MudGrid Spacing="3">
            @foreach (var goal in DisplayedGoals)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="8" Class="@(goal.IsActive? _cardClass[0] : _cardClass[1])" Style="height: 100%; border: 1px solid var(--mud-palette-lines-default);">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderAvatar>
                                @if (!string.IsNullOrEmpty(goal.ImageSVG))
                                {
                                    <!-- Rendering SVG directly via MarkupString within a container for sizing -->
                                    <div style="width: 48px; height: 48px; display: flex; align-items: center; justify-content: center;">
                                        @((MarkupString)goal.ImageSVG)
                                    </div>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
                                }
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Class="font-weight-bold mud-text-primary">
                                    @TextHelper.TruncateString(goal.Name, 20)
                                </MudText>
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">@goal.FundName</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="flex-grow-1 pt-2 pb-0">
                            <MudText Typo="Typo.body2" Class="mud-text-info mb-2">
                                <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" />
                                @TextHelper.TruncateString(goal.Description, 98)
                            </MudText>

                            <!-- Using MudList for improved layout of details -->
                            <MudList T="string" DisablePadding="true" Class="my-2">
                                <MudListItem Icon="@Icons.Material.Filled.AccountBalance" IconColor="Color.Secondary">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Platform:</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Dark" Class="font-weight-bold">@goal.Platform</MudChip>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.Payments" IconColor="Color.Success">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">SIP Amount:</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Class="font-weight-bold">@goal.SIPAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.AttachMoney" IconColor="Color.Info">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Invested:</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="font-weight-bold">@goal.InvestedAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                    </MudStack>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.MilitaryTech" IconColor="Color.Warning">
                                    @* Changed icon to MilitaryTech *@
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Target:</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="font-weight-bold">@goal.TargetAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                    </MudStack>
                                </MudListItem>
                                @if (!string.IsNullOrEmpty(goal.Tag))
                                {
                                    <MudListItem Icon="@Icons.Material.Filled.LocalOffer" IconColor="Color.Tertiary">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                            <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Tags:</MudText>
                                            <MudStack Row="true" Spacing="0" Class="ml-2">
                                                @* Using MudStack here to align multiple chips horizontally *@
                                                @foreach (var tag in goal.Tag.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Tertiary" Class="font-weight-bold mr-1">@tag.Trim()</MudChip>
                                                }
                                            </MudStack>
                                        </MudStack>
                                    </MudListItem>
                                }
                            </MudList>

                            @if (goal.TargetAmount > 0)
                            {
                                <MudProgressLinear Color="Color.Primary" Size="Size.Large" Rounded="true"
                                                   Value="@((double)(goal.InvestedAmount / goal.TargetAmount * 100M))" Class="my-3">
                                    <MudText Typo="Typo.body2" Class="mud-text-white">@((goal.InvestedAmount / goal.TargetAmount).ToString("P0"))</MudText>
                                </MudProgressLinear>
                            }
                            else
                            {
                                <MudProgressLinear Color="Color.Surface" Size="Size.Large" Rounded="true" Value="0" Class="my-3">
                                    <MudText Typo="Typo.body2" Class="mud-text-white">0%</MudText>
                                </MudProgressLinear>
                            }
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-end pa-3 pt-0">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="(() => EditGoal(goal.Id))" Class="mr-2 ">Edit</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="(() => ConfirmDeleteGoal(goal.Id, goal.Name))" Class="rounded-lg">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        @if (totalFilteredPages > 1)
        {
            <div class="d-flex justify-center mt-6">
                <MudPagination Selected="currentPage" SelectedChanged="OnPageChange" Count="totalFilteredPages" Color="Color.Primary" Size="Size.Large" />
            </div>
        }
        else if (DisplayedGoals.Count > 0 && totalFilteredGoals <= limit)
        {
            <div class="d-flex justify-center mt-6">
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">
                    @if (IsSearchActive)
                    {
                        <text>All matching goals displayed (@totalFilteredGoals found).</text>
                    }
                    else
                    {
                        <text>All goals displayed.</text>
                    }
                </MudText>
            </div>
        }
    }
}

@code {
    [Parameter]
    public SupabaseApiService<GoalEntry> SupabaseService { get; set; }

    // Search related properties
    private string SearchTerm { get; set; } = string.Empty;
    private bool IsSearchActive => !string.IsNullOrWhiteSpace(SearchTerm);

    // Data properties
    private List<GoalEntry> AllGoals { get; set; } = new List<GoalEntry>();
    private List<GoalEntry> FilteredGoals { get; set; } = new List<GoalEntry>();
    private List<GoalEntry> DisplayedGoals { get; set; } = new List<GoalEntry>();

    // Pagination properties
    private int currentPage = 1;
    private int limit = 4; // Display 4 cards per page
    private bool isLoading = false;
    private int totalGoalsCount = 0; // Total goals in database
    private int totalFilteredGoals = 0; // Total goals after filtering
    private int totalFilteredPages = 0; // Total pages after filtering

    private string[] _cardClass = { "rounded-xl d-flex flex-column mud-background-alt  animate__animated animate__pulse", "rounded-xl d-flex flex-column mud-background-alt mud-border-secondary  animate__animated animate__headShake" };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync: Starting...");
        await LoadAllGoals();
        Console.WriteLine($"OnInitializedAsync: totalGoalsCount = {totalGoalsCount}");
    }

    /// <summary>
    /// Loads all goals from the database and initializes the display
    /// </summary>
    private async Task LoadAllGoals()
    {
        Console.WriteLine("LoadAllGoals: Loading all goals...");
        isLoading = true;
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot load goals.", Severity.Error);
                Console.WriteLine("Error: SupabaseService is null in LoadAllGoals.");
                return;
            }

            var result = await SupabaseService.GetAll();

            if (result.IsSuccess && result.Data != null)
            {
                AllGoals = result.Data;
                totalGoalsCount = AllGoals.Count;
                Console.WriteLine($"LoadAllGoals: Successfully loaded {totalGoalsCount} goals.");

                // Apply initial filter (no search term = show all)
                ApplyFilter();
            }
            else
            {
                Snackbar.Add($"Error loading goals: {result.ErrorMessage}", Severity.Error);
                Console.WriteLine($"Error in LoadAllGoals: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred while loading goals: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in LoadAllGoals: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Applies the current search filter and updates pagination
    /// </summary>
    private void ApplyFilter()
    {
        Console.WriteLine($"ApplyFilter: Applying filter with SearchTerm = '{SearchTerm}'");

        // Apply search filter
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredGoals = AllGoals.ToList();
        }
        else
        {
            FilteredGoals = AllGoals.Where(g =>
                g.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(g.Description) && g.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.FundName) && g.FundName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.Platform) && g.Platform.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.Tag) && g.Tag.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        // Update pagination info
        totalFilteredGoals = FilteredGoals.Count;
        totalFilteredPages = (int)Math.Ceiling(totalFilteredGoals / (double)limit);

        // Reset to page 1 when filter changes
        currentPage = 1;

        // Update displayed goals
        UpdateDisplayedGoals();

        Console.WriteLine($"ApplyFilter: Found {totalFilteredGoals} goals, {totalFilteredPages} pages");
        LogHelper.LogMessage(message: $"Filter Applied: '{SearchTerm}' - Found {totalFilteredGoals} goals", source: "ListGoalEntry", method: "ApplyFilter");
    }

    /// <summary>
    /// Updates the goals displayed on the current page
    /// </summary>
    private void UpdateDisplayedGoals()
    {
        int skip = (currentPage - 1) * limit;
        DisplayedGoals = FilteredGoals.Skip(skip).Take(limit).ToList();
        Console.WriteLine($"UpdateDisplayedGoals: Displaying {DisplayedGoals.Count} goals on page {currentPage}");
    }

    /// <summary>
    /// Handles search term changes with debouncing
    /// </summary>
    private async Task OnSearchChanged()
    {
        Console.WriteLine($"OnSearchChanged: Search term changed to '{SearchTerm}'");
        ApplyFilter();
        StateHasChanged();
    }

    /// <summary>
    /// Performs search when search button is clicked
    /// </summary>
    private void PerformSearch()
    {
        Console.WriteLine($"PerformSearch: Explicit search triggered with term '{SearchTerm}'");
        ApplyFilter();
        StateHasChanged();
    }

    /// <summary>
    /// Clears the search term and resets the filter
    /// </summary>
    private void ClearSearch()
    {
        Console.WriteLine("ClearSearch: Clearing search");
        SearchTerm = string.Empty;
        ApplyFilter();
        StateHasChanged();
    }

    /// <summary>
    /// Handles page change events
    /// </summary>
    /// <param name="pageNumber">The newly selected page number</param>
    private async Task OnPageChange(int pageNumber)
    {
        Console.WriteLine($"OnPageChange: Changing to page {pageNumber}");
        currentPage = pageNumber;
        UpdateDisplayedGoals();
        StateHasChanged();
    }

    /// <summary>
    /// Displays a confirmation dialog before deleting a goal entry.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be deleted.</param>
    /// <param name="goalName">The name of the goal, used for display in the confirmation message.</param>
    private async Task ConfirmDeleteGoal(Guid goalId, string goalName)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the goal '{goalName}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteGoal(goalId);
        }
    }

    /// <summary>
    /// Deletes a specific goal entry from the Supabase API and updates the UI.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be deleted.</param>
    private async Task DeleteGoal(Guid goalId)
    {
        Console.WriteLine($"DeleteGoal: Attempting to delete goal with ID: {goalId}");
        isLoading = true;
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot delete goal.", Severity.Error);
                Console.WriteLine("Error: SupabaseService is null in DeleteGoal.");
                return;
            }

            var result = await SupabaseService.Delete(goalId);

            if (result.IsSuccess)
            {
                Snackbar.Add("Goal deleted successfully!", Severity.Success);
                Console.WriteLine($"DeleteGoal: Successfully deleted goal with ID: {goalId}");

                // Remove the deleted goal from our local collections
                AllGoals.RemoveAll(g => g.Id == goalId);
                totalGoalsCount = AllGoals.Count;

                // Reapply filter to update the display
                ApplyFilter();

                // If current page is now empty but there are previous pages, go back one page
                if (DisplayedGoals.Count == 0 && currentPage > 1)
                {
                    currentPage--;
                    UpdateDisplayedGoals();
                }
            }
            else
            {
                Snackbar.Add($"Error deleting goal: {result.ErrorMessage}", Severity.Error);
                Console.WriteLine($"Error in DeleteGoal: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred during deletion: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in DeleteGoal: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Redirects the user to the GoalEntry edit page.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be edited.</param>
    private void EditGoal(Guid goalId)
    {
        Console.WriteLine($"EditGoal: Navigating to /dynamic-forms/GoalContribution/edit-plan/{goalId}");
        NavigationManager.NavigateTo($"dynamic-forms/GoalContribution/edit-plan/{goalId}");
    }
}