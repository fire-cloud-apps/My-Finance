@page "/goalentries"
@using MyFinance.Model
@using Supabase.RestAPI
@using System.Globalization // Required for CultureInfo
@* SupabaseApiService is now a [Parameter] as requested *@
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Class="mb-4 mud-text-secondary">Your Financial Goals</MudText>

@if (isLoading && GoalEntries.Count == 0 && totalGoalsCount == 0)
{
    <MudProgressCircular Indeterminate="true" Class="d-flex justify-center mt-8" Color="Color.Primary" />
}
else if (GoalEntries.Count == 0 && totalGoalsCount == 0)
{
    <MudAlert Severity="Severity.Info" Class="rounded-lg shadow-sm">No goals found. Start by adding a new goal!</MudAlert>
}
else
{
    <MudGrid Spacing="3">
        @foreach (var goal in GoalEntries)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="8" Class="rounded-xl d-flex flex-column mud-background-alt" Style="height: 100%; border: 1px solid var(--mud-palette-lines-default);">
                    <MudCardHeader Class="pb-0">
                        <CardHeaderAvatar>
                            @if (!string.IsNullOrEmpty(goal.ImageSVG))
                            {
                                <!-- Rendering SVG directly via MarkupString within a container for sizing -->
                                <div style="width: 48px; height: 48px; display: flex; align-items: center; justify-content: center;">
                                    @((MarkupString)goal.ImageSVG)
                                </div>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="font-weight-bold mud-text-primary">@goal.Name</MudText>
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">@goal.FundName</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="flex-grow-1 pt-2 pb-0">
                        <MudText Typo="Typo.body2" Class="mud-text-info mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" />
                            @goal.Description
                        </MudText>

                        <!-- Using MudList for improved layout of details -->
                        <MudList T="string" DisablePadding="true" Class="my-2">
                            <MudListItem Icon="@Icons.Material.Filled.AccountBalance" IconColor="Color.Secondary">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Platform:</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Dark" Class="font-weight-bold">@goal.Platform</MudChip>
                                </MudStack>
                            </MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.Payments" IconColor="Color.Success">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">SIP Amount:</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Class="font-weight-bold">@goal.SIPAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                </MudStack>
                            </MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.AttachMoney" IconColor="Color.Info">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Invested:</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="font-weight-bold">@goal.InvestedAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                </MudStack>
                            </MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.MilitaryTech" IconColor="Color.Warning"> @* Changed icon to MilitaryTech *@
                                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                    <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Target:</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="font-weight-bold">@goal.TargetAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                </MudStack>
                            </MudListItem>
                            @if (!string.IsNullOrEmpty(goal.Tag))
                            {
                                <MudListItem Icon="@Icons.Material.Filled.LocalOffer" IconColor="Color.Tertiary">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Tags:</MudText>
                                        <MudStack Row="true" Spacing="0" Class="ml-2"> @* Using MudStack here to align multiple chips horizontally *@
                                            @foreach (var tag in goal.Tag.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Tertiary" Class="font-weight-bold mr-1">@tag.Trim()</MudChip>
                                            }
                                        </MudStack>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>

                        @if (goal.TargetAmount > 0)
                        {
                            <MudProgressLinear Color="Color.Primary" Size="Size.Large" Rounded="true"
                                               Value="@((double)(goal.InvestedAmount / goal.TargetAmount * 100M))" Class="my-3">
                                <MudText Typo="Typo.body2" Class="mud-text-white">@((goal.InvestedAmount / goal.TargetAmount).ToString("P0"))</MudText>
                            </MudProgressLinear>
                        }
                        else
                        {
                            <MudProgressLinear Color="Color.Surface" Size="Size.Large" Rounded="true" Value="0" Class="my-3">
                                <MudText Typo="Typo.body2" Class="mud-text-white">0%</MudText>
                            </MudProgressLinear>
                        }
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-end pa-3 pt-0">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="(() => EditGoal(goal.Id))" Class="mr-2 rounded-lg">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete"
                                   OnClick="(() => ConfirmDeleteGoal(goal.Id, goal.Name))" Class="rounded-lg">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (totalPages > 1)
    {
        <div class="d-flex justify-center mt-6">
            <MudPagination Selected="currentPage" SelectedChanged="OnPageChange" Count="totalPages" Color="Color.Primary" Size="Size.Large" />
        </div>
    }
    else if (GoalEntries.Count > 0 && totalGoalsCount <= limit) // Changed condition to reflect "all goals displayed"
    {
        <div class="d-flex justify-center mt-6">
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">All goals displayed.</MudText>
        </div>
    }
}

@code {
    [Parameter]
    public SupabaseApiService<GoalEntry> SupabaseService { get; set; }

    private List<GoalEntry> GoalEntries { get; set; } = new List<GoalEntry>();
    private int currentPage = 1;
    private int limit = 4; // Display 4 cards per page
    private bool isLoading = false;
    private int totalGoalsCount = 0; // To store the total count of goals
    private int totalPages => (int)Math.Ceiling(totalGoalsCount / (double)limit);

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync: Starting...");
        await LoadTotalGoalsCount(); // First get the total count
        await LoadGoals(currentPage); // Then load the first page
        Console.WriteLine($"OnInitializedAsync: totalGoalsCount = {totalGoalsCount}, totalPages = {totalPages}, currentPage = {currentPage}");
    }

    /// <summary>
    /// Loads the total count of financial goals from the Supabase API.
    /// This is used to determine the total number of pages for pagination.
    /// NOTE: For large datasets, this approach of calling GetAll() can be inefficient.
    /// A dedicated API endpoint or a more optimized way to get the count from Supabase
    /// without fetching all data would be preferable in a production environment.
    /// </summary>
    private async Task LoadTotalGoalsCount()
    {
        Console.WriteLine("LoadTotalGoalsCount: Fetching all goals to get total count...");
        if (SupabaseService == null)
        {
            Snackbar.Add("SupabaseService is not provided. Cannot get total goals count.", Severity.Error);
            Console.WriteLine("Error: SupabaseService is null in LoadTotalGoalsCount.");
            return;
        }

        try
        {
            var result = await SupabaseService.GetAll(); // Fetch all to get total count
            if (result.IsSuccess && result.Data != null)
            {
                totalGoalsCount = result.Data.Count;
                Console.WriteLine($"LoadTotalGoalsCount: Successfully fetched totalGoalsCount = {totalGoalsCount}");
            }
            else
            {
                Snackbar.Add($"Error getting total goals count: {result.ErrorMessage}", Severity.Error);
                Console.WriteLine($"Error in LoadTotalGoalsCount: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred while getting total goals count: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in LoadTotalGoalsCount: {ex.Message}");
        }
    }


    /// <summary>
    /// Loads a specific page of financial goals from the Supabase API using BatchRead.
    /// </summary>
    /// <param name="pageNumber">The page number to load (1-based).</param>
    private async Task LoadGoals(int pageNumber)
    {
        Console.WriteLine($"LoadGoals: Loading page {pageNumber}...");
        isLoading = true;
        GoalEntries.Clear(); // Clear existing entries before loading new page
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot load goals.", Severity.Error);
                Console.WriteLine("Error: SupabaseService is null in LoadGoals.");
                isLoading = false;
                StateHasChanged();
                return;
            }

            int offset = (pageNumber - 1) * limit;
            Console.WriteLine($"LoadGoals: Calculated offset = {offset}, limit = {limit}");
            var result = await SupabaseService.BatchRead(offset, limit);

            if (result.IsSuccess && result.Data != null)
            {
                GoalEntries.AddRange(result.Data);
                Console.WriteLine($"LoadGoals: Successfully loaded {result.Data.Count} goals for page {pageNumber}.");
            }
            else
            {
                Snackbar.Add($"Error loading goals for page {pageNumber}: {result.ErrorMessage}", Severity.Error);
                Console.WriteLine($"Error in LoadGoals for page {pageNumber}: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred during page load: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in LoadGoals: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            Console.WriteLine($"LoadGoals: Finished loading page {pageNumber}. GoalEntries count: {GoalEntries.Count}");
        }
    }

    /// <summary>
    /// Handles the page change event from MudPagination.
    /// </summary>
    /// <param name="pageNumber">The newly selected page number.</param>
    private async Task OnPageChange(int pageNumber)
    {
        Console.WriteLine($"OnPageChange: New page selected = {pageNumber}");
        currentPage = pageNumber;
        await LoadGoals(currentPage);
    }

    /// <summary>
    /// Displays a confirmation dialog before deleting a goal entry.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be deleted.</param>
    /// <param name="goalName">The name of the goal, used for display in the confirmation message.</param>
    private async Task ConfirmDeleteGoal(Guid goalId, string goalName)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the goal '{goalName}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteGoal(goalId);
        }
    }

    /// <summary>
    /// Deletes a specific goal entry from the Supabase API and updates the UI.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be deleted.</param>
    private async Task DeleteGoal(Guid goalId)
    {
        Console.WriteLine($"DeleteGoal: Attempting to delete goal with ID: {goalId}");
        isLoading = true;
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot delete goal.", Severity.Error);
                Console.WriteLine("Error: SupabaseService is null in DeleteGoal.");
                isLoading = false;
                StateHasChanged();
                return;
            }

            var result = await SupabaseService.Delete(goalId);

            if (result.IsSuccess)
            {
                Snackbar.Add("Goal deleted successfully!", Severity.Success);
                Console.WriteLine($"DeleteGoal: Successfully deleted goal with ID: {goalId}");
                // After deletion, reload the total count and the current page
                await LoadTotalGoalsCount();
                await LoadGoals(currentPage);
            }
            else
            {
                Snackbar.Add($"Error deleting goal: {result.ErrorMessage}", Severity.Error);
                Console.WriteLine($"Error in DeleteGoal: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred during deletion: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception in DeleteGoal: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Redirects the user to the GoalEntry edit page.
    /// </summary>
    /// <param name="goalId">The unique identifier of the goal to be edited.</param>
    private void EditGoal(Guid goalId)
    {
        Console.WriteLine($"EditGoal: Navigating to /goalentry/edit/{goalId}");
        NavigationManager.NavigateTo($"/goalentry/edit/{goalId}");
    }
}
