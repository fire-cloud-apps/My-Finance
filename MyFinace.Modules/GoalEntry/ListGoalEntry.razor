@page "/goalentries"
@using MyFinance.Model
@using MyFinance.Utility.Helper
@using Supabase.RestAPI
@using System.Globalization

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


@if (isLoading && DisplayedGoals.Count == 0 && totalGoalsCount == 0)
{
    <MudProgressCircular Indeterminate="true" Class="d-flex justify-center mt-8" Color="Color.Primary" />
}
else if (DisplayedGoals.Count == 0 && totalGoalsCount == 0)
{
    <MudAlert Severity="Severity.Info" Class="rounded-lg shadow-sm">No goals found. Start by adding a new goal!</MudAlert>
}
else
{
    <div class="ma-2 pa-2 d-flex" elevation="0">
        <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center">
            <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.Pin" Size="Size.Large" />
            @if (DeviceType == DeviceType.Mobile)
            {
                <MudText Typo="Typo.button" Class="mb-0 mud-text-secondary">Financial Goals</MudText>
            }
            else
            {
                <MudText Typo="Typo.h4" Class="mb-0 mud-text-secondary">Your Financial Goals</MudText>
            }            
        </MudStack>
        <MudSpacer />
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.body2" Class="mud-text-secondary">View: @(selectedViewMode)</MudText>

            <MudToggleGroup T="string" @bind-Value="selectedViewMode"  SelectionMode="SelectionMode.SingleSelection" Class="ml-2">
                <MudToggleItem Value="@("card")" Text="card" Title="Card View">
                    <MudIcon Icon="@Icons.Material.Filled.ViewModule" />
                </MudToggleItem>
                <MudToggleItem Value="@("list")" Text="list" Title="List View">
                    <MudIcon Icon="@Icons.Material.Filled.ViewList" />
                </MudToggleItem>
                <MudToggleItem Value="@("table")" Text="table" Title="Table View">
                    <MudIcon Icon="@Icons.Material.Filled.TableChart" />
                </MudToggleItem>
            </MudToggleGroup> 

            <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Add"
                       OnClick="@(() => NavigationManager.NavigateTo("dynamic-forms/GoalContribution/add-plan"))">
                Add New Goal
            </MudButton>
        </MudStack>
    </div>

    <MudPaper Elevation="6" Class="pa-6 rounded-xl animate__animated animate__fadeInUp mb-8">
        <MudTextField @bind-Value="searchTerm"
                      Label="Search Goals by Name"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Primary"
                      Clearable="true"
                      OnAdornmentClick="PerformSearch"
                      OnClearButtonClick="ClearSearch"
                      @bind-Value:after="OnSearchChanged"
                      DebounceInterval="300" />
    </MudPaper>

    @if (DisplayedGoals.Count == 0 && !string.IsNullOrWhiteSpace(searchTerm))
    {
        <MudAlert Severity="Severity.Info" Class="rounded-lg shadow-sm mb-4">
            No goals found matching "@searchTerm". Try a different search term.
        </MudAlert>
    }
    else if (DisplayedGoals.Count > 0)
    {
        @if (selectedViewMode == "table")
        {
            <!-- Table View -->
            <MudTable Items="@DisplayedGoals" Dense="true" Hover="true"  
                      Class="rounded-lg" Elevation="4">
                <HeaderContent>
                    <MudTh>Goal</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<GoalEntry, object>(x => x.Platform)">
                            Platform
                        </MudTableSortLabel>                        
                    </MudTh>
                    <MudTh>SIP Amount</MudTh>
                    <MudTh>Invested</MudTh>
                    <MudTh>Target</MudTh>
                    <MudTh>Progress</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Goal">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            @if (!string.IsNullOrEmpty(context.ImageSVG))
                            {
                                <div style="width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                                    @((MarkupString)context.ImageSVG)
                                </div>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Medium" />
                            }
                            <MudStack Spacing="0">

                                <MudText Typo="Typo.body2" 
                                 Color="@(context.IsActive? Color.Default: Color.Secondary)" 
                                 Class="font-weight-bold">
                                    <MudTooltip Text="@context.Description">
                                        @TextHelper.TruncateString(context.Name, 30)
                                    </MudTooltip>
                                 </MudText>
                                
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">@context.FundName</MudText>
                            </MudStack>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Platform">
                        <MudChip T="string" Size="Size.Small" 
                            Color="@(context.IsActive ? Color.Dark : Color.Secondary)">
                            @context.Platform</MudChip>
                    </MudTd>
                    <MudTd DataLabel="SIP Amount">
                        <MudText Typo="Typo.body2" Class="font-weight-bold text-success">@context.SIPAmount.ToString("C", new CultureInfo("en-IN"))</MudText>
                    </MudTd>
                    <MudTd DataLabel="Invested">
                        <MudText Typo="Typo.body2" Class="font-weight-bold text-info">@context.InvestedAmount.ToString("C", new CultureInfo("en-IN"))</MudText>
                    </MudTd>
                    <MudTd DataLabel="Target">
                        <MudText Typo="Typo.body2" Class="font-weight-bold text-warning">@context.TargetAmount.ToString("C", new CultureInfo("en-IN"))</MudText>
                    </MudTd>
                    <MudTd DataLabel="Progress">
                        <MudStack Spacing="1">
                            <MudProgressLinear Color="@ProgressColor.GetProgressColor(context.InvestedAmount, context.TargetAmount)" Size="Size.Medium" Rounded="true"
                                               Value="@(context.TargetAmount > 0 ? (double)(context.InvestedAmount / context.TargetAmount * 100M) : 0)" />
                            <MudText Typo="Typo.caption" Class="text-center">
                                @(context.TargetAmount > 0 ? (context.InvestedAmount / context.TargetAmount).ToString("P0") : "0%")
                            </MudText>
                        </MudStack>
                    </MudTd>
                    
                    <MudTd DataLabel="Actions">
                        <MudStack Row="true" Spacing="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                           OnClick="@(() => EditGoal(context.Id))" Title="Edit Goal" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                           OnClick="@(() => ConfirmDeleteGoal(context.Id, context.Name))" Title="Delete Goal" />
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else if (selectedViewMode == "card")
        {
            <!-- Card View -->
            <MudGrid Spacing="3">
                @foreach (var goal in DisplayedGoals)
                {
                    <MudItem T="string" xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="8" Class="@(goal.IsActive ? cardClass[0] : cardClass[1])" Style="height: 100%; border: 1px solid var(--mud-palette-lines-default);">
                            <MudCardHeader Class="pb-0">
                                <CardHeaderAvatar>
                                    @if (!string.IsNullOrEmpty(goal.ImageSVG))
                                    {
                                        <div style="width: 48px; height: 48px; display: flex; align-items: center; justify-content: center;">
                                            @((MarkupString)goal.ImageSVG)
                                        </div>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
                                    }
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Class="font-weight-bold mud-text-primary">
                                        @TextHelper.TruncateString(goal.Name, 20)
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">@goal.FundName</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="flex-grow-1 pt-2 pb-0">
                                <MudText Typo="Typo.body2" Class="mud-text-info mb-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" />
                                    @TextHelper.TruncateString(goal.Description, 98)
                                </MudText>

                                <MudTooltip Text="Last Modified" Arrow="true">
                                    <MudChip T="string" Size="Size.Small" Icon="material-symbols-outlined/nest_clock_farsight_analog" Variant="Variant.Text"
                                             Color="Color.Info">
                                        @(goal.LastModified.HasValue? goal.LastModified.Value.ToString("D"): "")
                                    </MudChip>
                                </MudTooltip>

                                <MudList T="string" DisablePadding="true" Class="my-2">
                                    <MudListItem Icon="@Icons.Material.Filled.AccountBalance" IconColor="Color.Secondary">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                            <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Platform:</MudText>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Dark" Class="font-weight-bold">@goal.Platform</MudChip>
                                        </MudStack>
                                    </MudListItem>
                                    <MudListItem Icon="@Icons.Material.Filled.Payments" IconColor="Color.Success">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                            <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">SIP Amount:</MudText>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success" Class="font-weight-bold">@goal.SIPAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                        </MudStack>
                                    </MudListItem>
                                    <MudListItem Icon="@Icons.Material.Filled.AttachMoney" IconColor="Color.Info">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                            <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Invested:</MudText>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="font-weight-bold">@goal.InvestedAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                        </MudStack>
                                    </MudListItem>
                                    <MudListItem Icon="@Icons.Material.Filled.MilitaryTech" IconColor="Color.Warning">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                            <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Target:</MudText>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="font-weight-bold">@goal.TargetAmount.ToString("C", new CultureInfo("en-IN"))</MudChip>
                                        </MudStack>
                                    </MudListItem>
                                    @if (!string.IsNullOrEmpty(goal.Tag))
                                    {
                                        <MudListItem Icon="@Icons.Material.Filled.LocalOffer" IconColor="Color.Tertiary">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                                                <MudText Typo="Typo.subtitle2" Class="mud-text-tertiary">Tags:</MudText>
                                                <MudStack Row="true" Spacing="0" Class="ml-2">
                                                    @foreach (var tag in goal.Tag.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Color="Color.Tertiary" Class="font-weight-bold mr-1">@tag.Trim()</MudChip>
                                                    }
                                                </MudStack>
                                            </MudStack>
                                        </MudListItem>
                                    }
                                </MudList>

                                @if (goal.TargetAmount > 0)
                                {
                                    @* Color = "@(goal.IsActive? Color.Dark: Color.Secondary)" *@
                                    <MudProgressLinear 
                                        Color="@ProgressColor.GetProgressColor(goal.InvestedAmount, goal.TargetAmount)" Size="Size.Large" Rounded="true"
                                                       Value="@((double)(goal.InvestedAmount / goal.TargetAmount * 100M))" Class="my-3">
                                        <MudText Typo="Typo.body2" Class="mud-text-white">@((goal.InvestedAmount / goal.TargetAmount).ToString("P0"))</MudText>
                                    </MudProgressLinear>
                                }
                                else
                                {
                                    <MudProgressLinear Color="Color.Surface" Size="Size.Large" Rounded="true" Value="0" Class="my-3">
                                        <MudText Typo="Typo.body2" Class="mud-text-white">0%</MudText>
                                    </MudProgressLinear>
                                }
                            </MudCardContent>
                            <MudCardActions Class="d-flex justify-end pa-3 pt-0">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit"
                                           OnClick="@(() => EditGoal(goal.Id))" Class="mr-2 ">Edit</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete"
                                           OnClick="@(() => ConfirmDeleteGoal(goal.Id, goal.Name))" Class="rounded-lg">Delete</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <!-- List View -->
            <MudPaper Elevation="4" Class="rounded-lg overflow-hidden">
                @foreach (var goal in DisplayedGoals)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" 
                              Class="@(goal.IsActive ? "pa-4 hover:bg-surface" : "pa-4 hover:bg-surface opacity-75")" 
                              Style="border-bottom: 1px solid var(--mud-palette-lines-default);">
                        
                        <!-- Goal Icon & Info -->
                        <div style="min-width: 200px;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                @if (!string.IsNullOrEmpty(goal.ImageSVG))
                                {
                                    <div style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                                        @((MarkupString)goal.ImageSVG)
                                    </div>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
                                }
                                <MudStack Spacing="0">
                                    <MudLink Href="@($"dynamic-forms/GoalContribution/edit-plan/{goal.Id}")" Typo="Typo.h6"
                                             Color="@(goal.IsActive? Color.Default: Color.Secondary)"
                                        Class="font-weight-bold mud-text-primary">
                                        <MudTooltip Text="@goal.Description">
                                            @TextHelper.TruncateString(goal.Name, 30)
                                        </MudTooltip>
                                    </MudLink>
                                   
                                    <MudText Typo="Typo.caption"                                        
                                        Class="mud-text-secondary">@goal.FundName</MudText>
                                </MudStack>
                            </MudStack>
                        </div>

                        <!-- Platform -->
                        <div style="min-width: 120px;">
                            <MudChip T="string" Size="Size.Small" 
                                Color="@(goal.IsActive? Color.Dark: Color.Secondary)" 
                                Class="font-weight-bold">@goal.Platform</MudChip>
                        </div>

                        <!-- Financial Info -->
                        <div style="min-width: 300px;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="4">
                                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption" Class="mud-text-tertiary">SIP</MudText>
                                    <MudText Typo="Typo.body2" Class="font-weight-bold text-success">@goal.SIPAmount.ToString("C0", new CultureInfo("en-IN"))</MudText>
                                </MudStack>
                                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption" Class="mud-text-tertiary">Invested</MudText>
                                    <MudText Typo="Typo.body2" Class="font-weight-bold text-info">@goal.InvestedAmount.ToString("C0", new CultureInfo("en-IN"))</MudText>
                                </MudStack>
                                <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.caption" Class="mud-text-tertiary">Target</MudText>
                                    <MudText Typo="Typo.body2" Class="font-weight-bold text-warning">@goal.TargetAmount.ToString("C0", new CultureInfo("en-IN"))</MudText>
                                </MudStack>
                            </MudStack>
                        </div>

                        <!-- Progress -->
                        <div style="min-width: 30%;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
                                @{
                                    var progressValue = goal.TargetAmount > 0 ? (double)(goal.InvestedAmount / goal.TargetAmount * 100M) : 0;
                                }
                                <MudProgressCircular Color="@ProgressColor.GetProgressColor(goal.InvestedAmount, goal.TargetAmount)" Rounded="true" Size="Size.Large"
                                                     StrokeWidth="4" Value="@progressValue">
                                    @if (progressValue >= 100)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption" Class="text-center">
                                            @((goal.TargetAmount > 0 ? (goal.InvestedAmount / goal.TargetAmount).ToString("P0") : "0%"))
                                        </MudText>
                                    }
                                </MudProgressCircular>
                                <MudStack Justify="Justify.Center" Spacing="0" Style="flex-grow: 1;">
                                    <MudProgressLinear Color="@ProgressColor.GetProgressColor(goal.InvestedAmount, goal.TargetAmount)" Striped="false" Size="Size.Large"
                                                       Min="0" Max="@((double) @goal.TargetAmount)"
                                                       Value="@((double) @goal.InvestedAmount)" Class="my-2">
                                        <MudText Typo="Typo.caption">
                                            Remaining: @((goal.TargetAmount - goal.InvestedAmount).ToString("C0", new CultureInfo("en-IN")))
                                        </MudText>
                                    </MudProgressLinear>
                                </MudStack>
                            </MudStack>
                        </div>

                        <!-- Last modified -->
                        <div style="min-width: 20px;">
                            <MudTooltip Text="@($"Last Modified : {(goal.LastModified.HasValue ? goal.LastModified.Value.ToString("D") : "Not Available")}")" Arrow="true">
                                <MudChip T="string" Size="Size.Small" Icon="material-symbols-outlined/nest_clock_farsight_analog" Variant="Variant.Text"
                                         Color="Color.Info" />
                            </MudTooltip>
                        </div>                      

                        <MudSpacer />

                        <!-- Actions -->
                        <MudStack Row="true" Spacing="2">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium"
                              OnClick="@(() => ConfirmDeleteGoal(goal.Id, goal.Name))" Title="Delete Goal" />
                        </MudStack>
                    </MudStack>
                }
            </MudPaper>
        }

        @if (totalFilteredPages > 1)
        {
            <div class="d-flex justify-center mt-6">
                <MudPagination Selected="@currentPage" SelectedChanged="OnPageChange" Count="@totalFilteredPages" Color="Color.Primary" Size="Size.Large" />
            </div>
        }
        else if (DisplayedGoals.Count > 0 && totalFilteredGoals <= limit)
        {
            <div class="d-flex justify-center mt-6">
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">
                    @if (IsSearchActive)
                    {
                        <text>All matching goals displayed (@totalFilteredGoals found).</text>
                    }
                    else
                    {
                        <text>All goals displayed.</text>
                    }
                </MudText>
            </div>
        }
    }
}

@code {
    [Parameter]
    public SupabaseApiService<GoalEntry> SupabaseService { get; set; }

    [Parameter]
    public DeviceType DeviceType { get; set; } = DeviceType.Desktop;
    // View mode selection
    private string selectedViewMode = "card";
    
    // Search related properties
    private string searchTerm = string.Empty;
    private bool IsSearchActive => !string.IsNullOrWhiteSpace(searchTerm);
    
    // Data properties
    private List<GoalEntry> AllGoals { get; set; } = new();
    private List<GoalEntry> FilteredGoals { get; set; } = new();
    private List<GoalEntry> DisplayedGoals { get; set; } = new();
    
    // Pagination properties
    private int currentPage = 1;
    private int limit = 12;
    private bool isLoading = false;
    private int totalGoalsCount = 0;
    private int totalFilteredGoals = 0;
    private int totalFilteredPages = 0;
    
    private string[] cardClass = { "rounded-xl d-flex flex-column mud-background-alt", "rounded-xl d-flex flex-column mud-background-alt mud-border-secondary" };

    protected override async Task OnInitializedAsync()
    {
        await LoadAllGoals();
    }

    private async Task LoadAllGoals()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot load goals.", Severity.Error);
                return;
            }

            var result = await SupabaseService.GetAll();

            if (result.IsSuccess && result.Data != null)
            {
                AllGoals = result.Data;
                totalGoalsCount = AllGoals.Count;
                ApplyFilter();
            }
            else
            {
                Snackbar.Add($"Error loading goals: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred while loading goals: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredGoals = AllGoals.OrderBy(g => g.LastModified).ToList();
        }
        else
        {
            FilteredGoals = AllGoals.Where(g => 
                g.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(g.Description) && g.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.FundName) && g.FundName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.Platform) && g.Platform.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(g.Tag) && g.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).OrderBy(g => g.LastModified).ToList();
        }

        totalFilteredGoals = FilteredGoals.Count;
        totalFilteredPages = (int)Math.Ceiling(totalFilteredGoals / (double)limit);
        currentPage = 1;
        UpdateDisplayedGoals();
    }

    private void UpdateDisplayedGoals()
    {
        int skip = (currentPage - 1) * limit;
        DisplayedGoals = FilteredGoals.Skip(skip).Take(limit).ToList();
    }

    private async Task OnSearchChanged()
    {
        ApplyFilter();
        await InvokeAsync(StateHasChanged);
    }

    private void PerformSearch()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilter();
        StateHasChanged();
    }

    private async Task OnPageChange(int pageNumber)
    {
        currentPage = pageNumber;
        UpdateDisplayedGoals();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConfirmDeleteGoal(Guid goalId, string goalName)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the goal '{goalName}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteGoal(goalId);
        }
    }

    private async Task DeleteGoal(Guid goalId)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (SupabaseService == null)
            {
                Snackbar.Add("SupabaseService is not provided. Cannot delete goal.", Severity.Error);
                return;
            }

            var result = await SupabaseService.Delete(goalId);

            if (result.IsSuccess)
            {
                Snackbar.Add("Goal deleted successfully!", Severity.Success);
                AllGoals.RemoveAll(g => g.Id == goalId);
                totalGoalsCount = AllGoals.Count;
                ApplyFilter();
                
                if (DisplayedGoals.Count == 0 && currentPage > 1)
                {
                    currentPage--;
                    UpdateDisplayedGoals();
                }
            }
            else
            {
                Snackbar.Add($"Error deleting goal: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred during deletion: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void EditGoal(Guid goalId)
    {
        NavigationManager.NavigateTo($"dynamic-forms/GoalContribution/edit-plan/{goalId}");
    }
}