@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<MudStack Row="true" Spacing="1">
    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .svg" FilesChanged="UploadFiles" MaximumFileCount="100">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
					   Color="Color.Primary" FullWidth="true"
                       >
                
                @if (!string.IsNullOrEmpty(_base64Image))
                {
                    <MudImage Fluid="true" Src="@_base64Image" Elevation="2"
                              Width="24" Height="24"
                    Style="max-width: 100%; height: auto; border-radius: 4px;" />
                }
                else
                {
                    @("Select (svg/png) Image file to upload.")
                }
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    @* @if (!string.IsNullOrEmpty(_base64Image))
    {
        <MudImage Fluid="true" Src="@_base64Image" Alt="Uploaded Image Preview"
                  Elevation="25" Class="rounded-lg ma-4"
                  Width="50" Height="50"
                  Style="max-width: 100%; height: auto; border-radius: 8px;" />
    } *@

</MudStack>




@code {
    private string _base64Image = string.Empty;
    private string errorMessage = string.Empty;
    [Parameter]
    public string Base64Image
    {
        get => _base64Image;
        set
        {
            if (_base64Image != value)
            {
                _base64Image = value;
                // Important: Invoke the 'Changed' event when the internal value changes
                Base64ImageChanged.InvokeAsync(value);
				Console.WriteLine($"Base64Image changed...");
            }
        }
    }
    // This EventCallback is essential for @bind-Base64Image to work
    [Parameter]
    public EventCallback<string> Base64ImageChanged { get; set; }
    

    private async Task UploadFiles(IBrowserFile file)
    {
        // Clear previous messages and errors
        errorMessage = string.Empty;
        _base64Image = string.Empty;

        if (file == null)
        {
            // No file selected, nothing to do
            return;
        }

        // Define the maximum allowed file size (1 MB)
        long maxFileSize = 1 * 1024 * 1024; // 1 MB in bytes

        // Check if the file size exceeds the limit
        if (file.Size > maxFileSize)
        {
            errorMessage = $"File is too large. Maximum allowed size is {maxFileSize / (1024 * 1024)} MB.";
            StateHasChanged(); // Update UI to show error immediately
            return;
        }

        // Validate file type (MIME type)
        // Ensure only PNG or SVG are accepted
        if (!(file.ContentType.Equals("image/png", StringComparison.OrdinalIgnoreCase) ||
              //file.ContentType.Equals("image/jpeg", StringComparison.OrdinalIgnoreCase) ||
              file.ContentType.Equals("image/svg+xml", StringComparison.OrdinalIgnoreCase)))
        {
            errorMessage = "Invalid file type. Please upload a PNG, or SVG image.";
            StateHasChanged();
            return;
        }

        try
        {
            // Open a read stream for the selected file.
            // The maxFileSize parameter here acts as a client-side guard to prevent reading excessively large files into memory.
            using (var stream = file.OpenReadStream(maxFileSize))
            {
                // Create a MemoryStream to hold the file's bytes
                using (var memoryStream = new MemoryStream())
                {
                    // Asynchronously copy the contents of the file stream to the memory stream
                    await stream.CopyToAsync(memoryStream);

                    // Convert the MemoryStream to a byte array
                    byte[] imageBytes = memoryStream.ToArray();

                    // Construct the Base64 Data URL.
                    // This format is "data:MIME_TYPE;base64,BASE64_STRING"
                    // It allows the browser to display the image directly from the string.
                    _base64Image = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
                }
            }
			Base64Image = _base64Image; // Update the parameter with the new Base64 image string
			await Base64ImageChanged.InvokeAsync(_base64Image); // Notify parent components of the change
            //await OnImageSelected.InvokeAsync(base64Image);
        }
        catch (Exception ex)
        {
            // Catch any exceptions during file processing (e.g., I/O errors)
            errorMessage = $"Error processing file: {ex.Message}. Please try again.";
            // Log the full exception for debugging purposes in the browser's console
            Console.WriteLine($"Error reading file: {ex.Message}");
        }
        finally
        {
            // Ensure the UI updates after file processing, whether successful or not
            StateHasChanged();
        }
    }
}