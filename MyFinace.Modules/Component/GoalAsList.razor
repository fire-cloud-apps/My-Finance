@using MyFinace.Modules.Goals
@using MyFinance.Model
@using MyFinance.Utility.Helper
@using System.Globalization

<MudGrid Class="pa-4 hover:bg-surface align-center" Style="border-bottom: 1px solid var(--mud-palette-lines-default);">

    <!-- Goal Icon & Info -->
    <MudItem xs="12" sm="6" md="4" lg="3">
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
            @if (!string.IsNullOrEmpty(Goal.ImageSVG))
            {
                <MudImage Src="@Goal.ImageSVG" Width="50" Height="50"
                          Class="ma-2"
                          Style="display: flex; align-items: center; justify-content: center; margin-right: 8px;  flex-shrink: 0;" Alt="@Goal.Name" />
                @* <div style="width: 48px; height: 48px; display: flex; align-items: center; justify-content: center;">
                    @((MarkupString)Goal.ImageSVG)
                </div> *@
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" />
            }
            <MudStack Spacing="0">
                <MudLink Href="@("viewgoal/" + @Goal.Id)" Typo="Typo.h6" Color="Color.Default" Class="font-weight-bold">
                    <MudTooltip Text="@Goal.Name">
                        @TextHelper.TruncateString(Goal.Name, 30)
                    </MudTooltip>
                </MudLink>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    <MudTooltip Text="@Goal.Description">
                        @TextHelper.TruncateString(Goal.Description, 50)
                    </MudTooltip>
                </MudText>
            </MudStack>
        </MudStack>
    </MudItem>

    <!-- Financial Info -->
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceAround" Spacing="4">
            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.caption" Color="Color.Tertiary">SIP</MudText>
                <MudText Typo="Typo.subtitle1" Class="font-weight-bold text-success">@Goal.TotalSIPAmount.ToString("C0", new CultureInfo("en-IN"))</MudText>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.caption" Color="Color.Tertiary">Invested</MudText>
                <MudText Typo="Typo.subtitle1" Class="font-weight-bold text-info">@Goal.TotalAmountInvested.ToString("C0", new CultureInfo("en-IN"))</MudText>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.caption" Color="Color.Tertiary">Target</MudText>
                <MudText Typo="Typo.subtitle1" Class="font-weight-bold text-warning">@Goal.TargetAmount.ToString("C0", new CultureInfo("en-IN"))</MudText>
            </MudStack>
        </MudStack>
    </MudItem>

    <!-- Progress -->
    <MudItem xs="12" sm="12" md="4" lg="5">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="4">
            @{
                var progressValue = Goal.TargetAmount > 0 ? (double)(Goal.TotalAmountInvested / Goal.TargetAmount * 100M) : 0;
            }
            <MudProgressCircular Color="@ProgressColor.GetProgressColor(Goal.TotalAmountInvested, Goal.TargetAmount)"
                                 Rounded="true" Size="Size.Large"
                                 StrokeWidth="4" Value="@progressValue">
                @if (progressValue >= 100)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                }
                else
                {
                    <MudText Typo="Typo.caption" Class="text-center">
                        @((Goal.TargetAmount > 0 ? (Goal.TotalAmountInvested / Goal.TargetAmount).ToString("P0") : "0%"))
                    </MudText>
                }
            </MudProgressCircular>
            <MudStack Justify="Justify.Center" Spacing="0" Style="flex-grow: 1;">
                <MudProgressLinear Color="@ProgressColor.GetProgressColor(Goal.TotalAmountInvested, Goal.TargetAmount)" Striped="false" Size="Size.Large"
                                   Min="0" Max="@((double) @Goal.TargetAmount)"
                                   Value="@((double) @Goal.TotalAmountInvested)" Class="my-2">
                    <MudText Typo="Typo.caption">
                        Remaining: @((Goal.TargetAmount - Goal.TotalAmountInvested).ToString("C0", new CultureInfo("en-IN")))
                    </MudText>
                </MudProgressLinear>
            </MudStack>
        </MudStack>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public Goal Goal { get; set; }

    // Parameters for passing functions from the parent
    [Parameter]
    public Func<decimal, decimal, double> CalculateProgressPercentageFunc { get; set; }

    [Parameter]
    public Func<DateTime?, DateTime?, double> CalculateTimeProgressPercentageFunc { get; set; }

    [Parameter]
    public Func<DateTime?, int> CalculateYearsRemainingFunc { get; set; }

    // EventCallbacks for actions
    [Parameter]
    public EventCallback<Guid> OnViewGoal { get; set; }

    [Parameter]
    public EventCallback<Guid> OnEditGoal { get; set; }

    [Parameter]
    public EventCallback<(Guid Id, string Name)> OnConfirmDelete { get; set; }

    protected override void OnInitialized()
    {
        
    }
}