@page "/goals"
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MyFinace.Modules.Component
@using MyFinace.Modules.Goals
@using MyFinance.Model
@using MyFinance.Utility
@using MyFinance.Utility.Helper
@using Supabase.RestAPI
@using System.Text.Json

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8 px-4 sm:px-6 md:px-8">
    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary" Class="mb-6 font-weight-bold">
        <MudIcon Icon="@Icons.Material.Filled.FormatListBulleted" Size="Size.Large" Class="mr-2" /> Your Financial Goals
    </MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mb-8 ">
        A comprehensive list of all your financial aspirations.
    </MudText>

    <MudPaper Elevation="6"  Class="pa-6 rounded-xl animate__animated animate__fadeInUp mb-8">
        <MudTextField @bind-Value="SearchTerm"
                      Label="Search Goals by Name"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Primary"
                      Clearable="true"
                      OnAdornmentClick="PerformSearch"
                      OnClearButtonClick="ClearSearch"
                      OnKeyUp="OnSearchKeyUp"
                      DebounceInterval="300" />
    </MudPaper>

    @if (isLoadingInitial)
    {
        <div class="d-flex justify-center align-center py-8">
            <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
            <MudText Class="ml-4">Loading Goals...</MudText>
        </div>
    }
    else if (!Goals.Any() && string.IsNullOrEmpty(SearchTerm))
    {
        <MudAlert Severity="Severity.Info" Class="my-4" Dense="true" Outlined="true" Icon="@Icons.Material.Filled.Info">
            No financial goals found. Start by adding a new goal!
        </MudAlert>
        <div class="d-flex justify-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Add" Class="mt-4 mud-elevation-2" >
                Add New Goal
            </MudButton>
        </div>
    }
    else if (!FilteredGoals.Any() && !string.IsNullOrEmpty(SearchTerm))
    {
        <MudAlert Severity="Severity.Info" Class="my-4" Dense="true" Outlined="true" Icon="@Icons.Material.Filled.Info">
            No goals matching "@SearchTerm" found.
        </MudAlert>
    }
    else
    {
        <MudGrid Spacing="4">
                @foreach (var goal in FilteredGoals.Skip((CurrentPage - 1) * PageSize).Take(PageSize))
            {
                <MudItem xs="12" sm="6" md="4" lg="3"> 
                  <GoalAsCard Goal="goal"
                    OnEditGoal="NavigateToEditGoal"
                    OnViewGoal="NavigateToViewGoal"
                    OnConfirmDelete="ConfirmDelete"
                    CalculateProgressPercentageFunc="CalculateProgressPercentage"
                    CalculateYearsRemainingFunc="CalculateYearsRemaining"
                    CalculateTimeProgressPercentageFunc="CalculateTimeProgressPercentage" />
                </MudItem>
            }            
        </MudGrid>
       
        //@if (FilteredGoals.Count > PageSize)
        {
            <div class="d-flex justify-center mt-8">
                <MudPagination
                    Count="@TotalPages"
                    Selected="@CurrentPage"
                    SelectedChanged="OnPageChanged"
                    Color="Color.Primary"
                    Size="Size.Large"
                    ShowFirstLastButton="true"
                    ShowQuickJumper="true" />
            </div>
        }

        @if (isLoadingMore)
        {
            <div class="d-flex justify-center align-center py-4">
                <MudProgressCircular Indeterminate Color="Color.Secondary" Size="Size.Small" />
                <MudText Class="ml-4">Loading more goals...</MudText>
            </div>
        }

        <div @ref="loadMoreSentinel" class="load-more-sentinel" style="height: 10px;"></div>
    }
</MudContainer>

@* Global Variables *@
@code{
    [Parameter]
    public SupabaseApiService<Goal> Supabase_GoalService { get; set; }
    [Parameter]
    public GlobalServices Global { get; set; }
	private int _totalRecords = 0;
	private int TotalPages { get; set; } = 1;
	private List<Goal> Goals { get; set; } = new List<Goal>();
}

@* Original Variables *@
@code{  

    private List<Goal> FilteredGoals { get; set; } = new List<Goal>();
    private bool isLoadingInitial = true;
    private bool isLoadingMore = false;
    private string SearchTerm { get; set; } = string.Empty;

    // Pagination properties
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 4; // Number of items per page
    

    // Intersection Observer for lazy loading
    private ElementReference loadMoreSentinel;
    private DotNetObjectReference<ListGoals>? _dotNetRef;


    // CultureInfo for Indian Rupees for currency formatting
    private System.Globalization.CultureInfo CultureInfo_IN = new System.Globalization.CultureInfo("en-IN");
}

@code {

    protected override async Task OnInitializedAsync()
    {
        if (Global == null)
        {
            Snackbar.Add("You must be logged in to view goals.", Severity.Error);
            isLoadingInitial = false;
            return;
        }
        await LoadGoals();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            // Initialize Intersection Observer in JavaScript
            // You will need to create a JavaScript function 'initializeIntersectionObserver' in your JS interop file
            // that targets the 'loadMoreSentinel' element and calls 'LoadMoreGoals' when it enters the viewport.
            //await JSRuntime.InvokeVoidAsync("supabaseInterop.initializeIntersectionObserver", loadMoreSentinel, _dotNetRef, "LoadMoreGoals");
        }
    }

    // This method will be called by JavaScript when the sentinel element is intersected
    [JSInvokable]
    public async Task LoadMoreGoals()
    {
        if (isLoadingMore || CurrentPage >= TotalPages)
        {
            return; // Already loading or no more pages
        }

        isLoadingMore = true;
        // In a real lazy loading scenario, you would fetch the next page from Supabase here.
        // For now, we simulate it by incrementing the page number.
        CurrentPage++;
        // If you were fetching from Supabase, it would look something like:
        // var (success, newGoals, errorMessage) = await SupabaseService.GetPaginated<GoalEntity>("Goal", CurrentPage, PageSize);
        // if (success && newGoals != null) { Goals.AddRange(newGoals); ApplyFilter(); }
        // For this example, since we fetch all goals initially, we just update the UI.
        StateHasChanged();
        isLoadingMore = false;
    }



    private async Task LoadGoals(int offset = 0, int limit = 1)
    {
        isLoadingInitial = true;
        try
        {            
            var goalResult = await Supabase_GoalService.GetAll();
            // Fetch the total count of records for pagination
            var getCount = await Supabase_GoalService.BatchRead(offset: offset, limit: limit);
            _totalRecords = getCount.GetTotalCountFromContentRange();
            TotalPages = (int)Math.Ceiling(_totalRecords / (double)PageSize);

            if (goalResult == null || goalResult.Data == null)
            {
                Snackbar.Add("Failed to load goals.", Severity.Error);
                LogHelper.LogMessage(
                    source: "ListGoals",
                    level: LogLevel.Warning,
                    method: "LoadGoals",
                    message: $"C#: Failed to load goals from Supabase."
                );
            }
            else
            {
                Goals = goalResult.Data.OrderBy(g => g.Name).ToList();
                FilteredGoals = Goals; // Initially, all goals are filtered
                LogHelper.LogMessage(
                   message: $"Result Goal: {(goalResult.Data.Count)}, TotalGoals: {_totalRecords}, Filtered Goals: {FilteredGoals.Count} Total Page : {TotalPages} Pagination : {FilteredGoals.Count > PageSize}  Offset: {offset} ",
                   level: LogLevel.Information,
                   source: "ListGoals.razor",
                   method: "LoadGoals"
                 );
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
            LogHelper.LogMessage(
                    source: "ListGoals",
                    level: LogLevel.Error,
                    method: "LoadGoals",
                    message: ex.Message, ex: ex
                );
        }
        finally
        {
            isLoadingInitial = false;
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredGoals = Goals;
        }
        else
        {
            FilteredGoals = Goals.Where(g => g.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        CurrentPage = 1; // Reset to first page on filter change
    }

    private void OnSearchTermChanged(string value)
    {
        SearchTerm = value;
        ApplyFilter();
    }

    private void PerformSearch()
    {
        ApplyFilter();
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilter();
        }
    }

    private void ClearSearch()
    {
        SearchTerm = string.Empty;
        ApplyFilter();
    }

    private void OnPageChanged(int page)
    {
        CurrentPage = page;
    }

    private double CalculateProgressPercentage(decimal invested, decimal target)
    {
        if (target <= 0) return 0;
        return Math.Min(100, (double)(invested / target * 100));
    }

    private int CalculateYearsRemaining(DateTime? targetYear)
    {
        if (!targetYear.HasValue) return 0;
        return Math.Max(0, targetYear.Value.Year - DateTime.Now.Year);
    }

    private double CalculateTimeProgressPercentage(DateTime? startedYear, DateTime? targetYear)
    {
        if (!startedYear.HasValue || !targetYear.HasValue || startedYear.Value >= targetYear.Value) return 0;

        var totalYears = (targetYear.Value - startedYear.Value).TotalDays / 365.25;
        var elapsedYears = (DateTime.Now - startedYear.Value).TotalDays / 365.25;

        if (totalYears <= 0) return 0;
        return Math.Min(100, (elapsedYears / totalYears) * 100);
    }


    private void NavigateToEditGoal(Guid id)
    {
        NavigationManager.NavigateTo($"dynamic-forms/Goals/Edit/{id}");
    }

    private void NavigateToViewGoal(Guid id)
    {
        NavigationManager.NavigateTo($"viewgoal/{id}");
    }

    // New method to confirm deletion
    //private async Task ConfirmDelete(Guid id, string goalName)
    private async Task ConfirmDelete((Guid id, string goalName) goalInfo)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the goal '{goalInfo.goalName}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled) // If dialog was not canceled (i.e., "Delete" was clicked)
        {
            await PerformDelete(goalInfo.id);
        }
    }

    // New method to perform deletion
    private async Task PerformDelete(Guid id)
    {
        // if (SupabaseService.CurrentSession == null)
        // {
        //     Snackbar.Add("You must be logged in to delete goals.", Severity.Error);
        //     return;
        // }
		var restult = await Supabase_GoalService.Delete(id);

        //var (success, errorMessage) = await SupabaseService.Delete("Goal", id);

        if (restult.IsSuccess)
        {
            // Remove the deleted goal from the lists to update UI
            Goals.RemoveAll(g => g.Id == id);
            FilteredGoals.RemoveAll(g => g.Id == id);
            Snackbar.Add("Goal deleted successfully!", Severity.Success);
            // Trigger a re-render
            StateHasChanged();
        }
        else
        {
            
            Snackbar.Add($"Failed to delete goal: {restult.ErrorMessage}", Severity.Error);
            Console.Error.WriteLine($"C#: Error deleting goal with ID {id}: {restult.ErrorMessage}");
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (_dotNetRef != null)
        {
            // Dispose the DotNetObjectReference to prevent memory leaks
            //await JSRuntime.InvokeVoidAsync("supabaseInterop.disconnectIntersectionObserver", loadMoreSentinel);
            _dotNetRef.Dispose();
        }
    }
}


